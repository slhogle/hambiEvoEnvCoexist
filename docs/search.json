[
  {
    "objectID": "R/communities/optical_density/01_format_plot_od.html",
    "href": "R/communities/optical_density/01_format_plot_od.html",
    "title": "Formatting and plotting optical density data",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(ggforce)\nlibrary(here)\nlibrary(fs)\nlibrary(scales)\nlibrary(ggh4x)\nsource(here::here(\"R\", \"utils_generic.R\"))\n\n\n\n\n\n\n\nShow/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"communities\", \"optical_density\")\ndata &lt;- here::here(\"data\", \"communities\", \"optical_density\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)\n\n\n\n\n\n\n\nShow/hide code\npairs &lt;- readr::read_tsv(here::here(data_raw, \"20240606_pairs\", \"optical_density_formatted.tsv\"))\ntqs &lt;- readr::read_tsv(here::here(data_raw, \"20240829_tqs\", \"optical_density_formatted.tsv\")) %&gt;% \n  mutate(well = paste0(str_extract(well, \"[A-H]\"),\n                               str_pad(str_extract(well, \"\\\\d+\"), 2, side = \"left\", pad = \"0\")))\n\n\n\n\n\n\n\nShow/hide code\npairs_comp &lt;- readr::read_tsv(here::here(\"data\", \"communities\", \"experiment_design\", \"pairs_sample_composition.tsv\")) %&gt;%\n  dplyr::mutate(name = paste(str_to_upper(evo_hist), str_remove(strainID, \"HAMBI_\"), target_f*100, sep = \"_\")) %&gt;% \n  dplyr::select(community_id, name) %&gt;%\n  dplyr::group_by(community_id) %&gt;% \n  dplyr::mutate(id = 1:n()) %&gt;% \n  dplyr::ungroup() %&gt;% \n  tidyr::pivot_wider(names_from = id, values_from = name ) %&gt;%\n  dplyr::rename(a = `1`, b = `2`) %&gt;% \n  mutate(a_sp = paste0(str_split_i(a, \"_\", 2), stringr::str_extract(str_split_i(a, \"_\", 1), \"^.{1}\")),\n         b_sp = paste0(str_split_i(b, \"_\", 2), stringr::str_extract(str_split_i(b, \"_\", 1), \"^.{1}\")),\n         a_f = str_split_i(a, \"_\", 3),\n         b_f = str_split_i(b, \"_\", 3)) %&gt;% \n  arrange(community_id) %&gt;% \n  mutate(n_species = 2,\n         sp = paste(a_sp, b_sp, sep = \"|\"),\n         f = paste(a_f, b_f, sep = \"|\"))\n\n\nRows: 96 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (3): community_id, evo_hist, strainID\ndbl (1): target_f\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow/hide code\ntrios_comp &lt;- readr::read_tsv(here::here(\"data\", \"communities\", \"experiment_design\", \"trios_sample_composition_wide.tsv\")) %&gt;% \n  dplyr::mutate(n_species = 3,\n                sp = paste(a_sp, b_sp, c_sp, sep = \"|\"),\n                f = paste(a_f, b_f, c_f, sep = \"|\"))\n\n\nRows: 96 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (7): well, a, a_sp, b, b_sp, c, c_sp\ndbl (4): microcosm_id, a_f, b_f, c_f\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow/hide code\nquart_comp &lt;- readr::read_tsv(here::here(\"data\", \"communities\", \"experiment_design\", \"quartets_sample_composition_wide.tsv\")) %&gt;% \n  mutate(n_species = 4,\n         sp = paste(a_sp, b_sp, c_sp, d_sp, sep = \"|\"),\n         f = paste(a_f, b_f, c_f, d_f, sep = \"|\"))\n\n\nRows: 64 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (9): well, a, a_sp, b, b_sp, c, c_sp, d, d_sp\ndbl (5): microcosm_id, a_f, b_f, c_f, d_f\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nAlso we take the mean and std dev for the 2 replicates of each condition\n\n\nShow/hide code\npairs_combo &lt;- left_join(pairs_comp, pairs, by = join_by(community_id, n_species)) %&gt;% \n  summarize(OD_mn = mean(OD),\n            OD_sd = sd(OD),\n            .by = c(sp, f, transfers, strep_conc)) %&gt;% \n  mutate(strep_conc = as.factor(strep_conc))\n\ntrios_combo &lt;- left_join(trios_comp, tqs, by = join_by(well, n_species)) %&gt;% \n  summarize(OD_mn = mean(OD),\n            OD_sd = sd(OD),\n            .by = c(sp, f, transfers, strep_conc)) %&gt;% \n  mutate(strep_conc = as.factor(strep_conc))\n\nquart_combo &lt;- left_join(quart_comp, tqs, by = join_by(well, n_species)) %&gt;% \n  summarize(OD_mn = mean(OD),\n            OD_sd = sd(OD),\n            .by = c(sp, f, transfers, strep_conc)) %&gt;% \n  mutate(strep_conc = as.factor(strep_conc))",
    "crumbs": [
      "3. Community growth - optical density",
      "i) Process and plot OD data"
    ]
  },
  {
    "objectID": "R/communities/optical_density/01_format_plot_od.html#libraries",
    "href": "R/communities/optical_density/01_format_plot_od.html#libraries",
    "title": "Formatting and plotting optical density data",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(ggforce)\nlibrary(here)\nlibrary(fs)\nlibrary(scales)\nlibrary(ggh4x)\nsource(here::here(\"R\", \"utils_generic.R\"))",
    "crumbs": [
      "3. Community growth - optical density",
      "i) Process and plot OD data"
    ]
  },
  {
    "objectID": "R/communities/optical_density/01_format_plot_od.html#global-variables",
    "href": "R/communities/optical_density/01_format_plot_od.html#global-variables",
    "title": "Formatting and plotting optical density data",
    "section": "",
    "text": "Show/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"communities\", \"optical_density\")\ndata &lt;- here::here(\"data\", \"communities\", \"optical_density\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "3. Community growth - optical density",
      "i) Process and plot OD data"
    ]
  },
  {
    "objectID": "R/communities/optical_density/01_format_plot_od.html#read-optical-density-data",
    "href": "R/communities/optical_density/01_format_plot_od.html#read-optical-density-data",
    "title": "Formatting and plotting optical density data",
    "section": "",
    "text": "Show/hide code\npairs &lt;- readr::read_tsv(here::here(data_raw, \"20240606_pairs\", \"optical_density_formatted.tsv\"))\ntqs &lt;- readr::read_tsv(here::here(data_raw, \"20240829_tqs\", \"optical_density_formatted.tsv\")) %&gt;% \n  mutate(well = paste0(str_extract(well, \"[A-H]\"),\n                               str_pad(str_extract(well, \"\\\\d+\"), 2, side = \"left\", pad = \"0\")))",
    "crumbs": [
      "3. Community growth - optical density",
      "i) Process and plot OD data"
    ]
  },
  {
    "objectID": "R/communities/optical_density/01_format_plot_od.html#read-and-format-community-information",
    "href": "R/communities/optical_density/01_format_plot_od.html#read-and-format-community-information",
    "title": "Formatting and plotting optical density data",
    "section": "",
    "text": "Show/hide code\npairs_comp &lt;- readr::read_tsv(here::here(\"data\", \"communities\", \"experiment_design\", \"pairs_sample_composition.tsv\")) %&gt;%\n  dplyr::mutate(name = paste(str_to_upper(evo_hist), str_remove(strainID, \"HAMBI_\"), target_f*100, sep = \"_\")) %&gt;% \n  dplyr::select(community_id, name) %&gt;%\n  dplyr::group_by(community_id) %&gt;% \n  dplyr::mutate(id = 1:n()) %&gt;% \n  dplyr::ungroup() %&gt;% \n  tidyr::pivot_wider(names_from = id, values_from = name ) %&gt;%\n  dplyr::rename(a = `1`, b = `2`) %&gt;% \n  mutate(a_sp = paste0(str_split_i(a, \"_\", 2), stringr::str_extract(str_split_i(a, \"_\", 1), \"^.{1}\")),\n         b_sp = paste0(str_split_i(b, \"_\", 2), stringr::str_extract(str_split_i(b, \"_\", 1), \"^.{1}\")),\n         a_f = str_split_i(a, \"_\", 3),\n         b_f = str_split_i(b, \"_\", 3)) %&gt;% \n  arrange(community_id) %&gt;% \n  mutate(n_species = 2,\n         sp = paste(a_sp, b_sp, sep = \"|\"),\n         f = paste(a_f, b_f, sep = \"|\"))\n\n\nRows: 96 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (3): community_id, evo_hist, strainID\ndbl (1): target_f\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow/hide code\ntrios_comp &lt;- readr::read_tsv(here::here(\"data\", \"communities\", \"experiment_design\", \"trios_sample_composition_wide.tsv\")) %&gt;% \n  dplyr::mutate(n_species = 3,\n                sp = paste(a_sp, b_sp, c_sp, sep = \"|\"),\n                f = paste(a_f, b_f, c_f, sep = \"|\"))\n\n\nRows: 96 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (7): well, a, a_sp, b, b_sp, c, c_sp\ndbl (4): microcosm_id, a_f, b_f, c_f\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow/hide code\nquart_comp &lt;- readr::read_tsv(here::here(\"data\", \"communities\", \"experiment_design\", \"quartets_sample_composition_wide.tsv\")) %&gt;% \n  mutate(n_species = 4,\n         sp = paste(a_sp, b_sp, c_sp, d_sp, sep = \"|\"),\n         f = paste(a_f, b_f, c_f, d_f, sep = \"|\"))\n\n\nRows: 64 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (9): well, a, a_sp, b, b_sp, c, c_sp, d, d_sp\ndbl (5): microcosm_id, a_f, b_f, c_f, d_f\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "3. Community growth - optical density",
      "i) Process and plot OD data"
    ]
  },
  {
    "objectID": "R/communities/optical_density/01_format_plot_od.html#subset-to-pairs-trios-and-quartets",
    "href": "R/communities/optical_density/01_format_plot_od.html#subset-to-pairs-trios-and-quartets",
    "title": "Formatting and plotting optical density data",
    "section": "",
    "text": "Also we take the mean and std dev for the 2 replicates of each condition\n\n\nShow/hide code\npairs_combo &lt;- left_join(pairs_comp, pairs, by = join_by(community_id, n_species)) %&gt;% \n  summarize(OD_mn = mean(OD),\n            OD_sd = sd(OD),\n            .by = c(sp, f, transfers, strep_conc)) %&gt;% \n  mutate(strep_conc = as.factor(strep_conc))\n\ntrios_combo &lt;- left_join(trios_comp, tqs, by = join_by(well, n_species)) %&gt;% \n  summarize(OD_mn = mean(OD),\n            OD_sd = sd(OD),\n            .by = c(sp, f, transfers, strep_conc)) %&gt;% \n  mutate(strep_conc = as.factor(strep_conc))\n\nquart_combo &lt;- left_join(quart_comp, tqs, by = join_by(well, n_species)) %&gt;% \n  summarize(OD_mn = mean(OD),\n            OD_sd = sd(OD),\n            .by = c(sp, f, transfers, strep_conc)) %&gt;% \n  mutate(strep_conc = as.factor(strep_conc))",
    "crumbs": [
      "3. Community growth - optical density",
      "i) Process and plot OD data"
    ]
  },
  {
    "objectID": "R/communities/optical_density/01_format_plot_od.html#plotting-function",
    "href": "R/communities/optical_density/01_format_plot_od.html#plotting-function",
    "title": "Formatting and plotting optical density data",
    "section": "2.1 Plotting function",
    "text": "2.1 Plotting function\n\n\nShow/hide code\nplot_od_grid &lt;- function(df, remove_first_cycle = TRUE, ncol){\n  pj &lt;- ggplot2::position_jitterdodge(jitter.width=0.0,\n                           jitter.height = 0.0,\n                           dodge.width = 0.5,\n                           seed=9)\n  \n  df %&gt;% \n    dplyr::filter(if(remove_first_cycle) transfers &gt; 2 else transfers &gt; 0) %&gt;%\n    ggplot2::ggplot(aes(x = transfers, y = OD_mn, color = strep_conc, group = interaction(strep_conc, f))) + \n    ggplot2::geom_linerange(aes(ymin = OD_mn - OD_sd, ymax = OD_mn + OD_sd, color = strep_conc), position = pj) + \n    ggh4x::geom_pointpath(aes(shape = f), position = pj, mult = 0.2) +\n    #ggplot2::geom_point() + \n    #ggplot2::geom_line(aes(linetype = f)) + \n    ggplot2::facet_wrap(~sp, ncol = ncol) +\n    ggplot2::labs(x = \"Growth cycle\", y = \"OD600\", color = \"Strep μg/ml\", shape = \"Mix ratio\") +\n    ggplot2::scale_color_viridis_d() +\n    ggplot2::theme_bw() + \n    ggplot2::theme(strip.background = element_blank(),\n        legend.position = \"bottom\", \n        axis.text = element_text(size = 8),\n        strip.text = element_text(size = 8))\n}",
    "crumbs": [
      "3. Community growth - optical density",
      "i) Process and plot OD data"
    ]
  },
  {
    "objectID": "R/communities/optical_density/01_format_plot_od.html#pairs",
    "href": "R/communities/optical_density/01_format_plot_od.html#pairs",
    "title": "Formatting and plotting optical density data",
    "section": "2.2 Pairs",
    "text": "2.2 Pairs\n\n\nShow/hide code\nfig_pairs &lt;- plot_od_grid(pairs_combo, remove_first_cycle = TRUE, ncol = 4)\n\n# ggsave(\n#   here::here(\"figs\", \".svg\"),\n#   fig01,\n#   width = 7,\n#   height = 12,\n#   units = \"in\",\n#   device = \"svg\"\n# )\n# \n# ggsave(\n#   here::here(\"figs\", \".png\"),\n#   fig01,\n#   width = 7,\n#   height = 12,\n#   units = \"in\",\n#   device = \"png\"\n# )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Species pairs optical density (y-axis) over series of 48 hour growth cycles (x-axis, 16 days total). Different panels in the grid contain distinct species pairs (A = ancestral, E = strep evolved). Colors show Streptomycin concentration in μg/ml and point shape shows the initial mixing ratio of each species (in the same order as specie listed in each panel). Note that data from the first growth cycle (after 48 hours) is excluded for ease of viewing.\n\n\n\n\n2.2.1 Pairs with first growth cycle\n\nShow/hide code\nplot_od_grid(pairs_combo, remove_first_cycle = FALSE, ncol = 4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: As in Figure 1 but including data from the first growth cycle.",
    "crumbs": [
      "3. Community growth - optical density",
      "i) Process and plot OD data"
    ]
  },
  {
    "objectID": "R/communities/optical_density/01_format_plot_od.html#trios",
    "href": "R/communities/optical_density/01_format_plot_od.html#trios",
    "title": "Formatting and plotting optical density data",
    "section": "2.3 Trios",
    "text": "2.3 Trios\n\n\nShow/hide code\nfig_trios &lt;- plot_od_grid(trios_combo, remove_first_cycle = TRUE, ncol = 4)\n\n# ggsave(\n#   here::here(\"figs\", \".svg\"),\n#   fig01,\n#   width = 7,\n#   height = 12,\n#   units = \"in\",\n#   device = \"svg\"\n# )\n# \n# ggsave(\n#   here::here(\"figs\", \".png\"),\n#   fig01,\n#   width = 7,\n#   height = 12,\n#   units = \"in\",\n#   device = \"png\"\n# )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Species trios optical density (y-axis) over series of 48 hour growth cycles (x-axis, 16 days total). Different panels in the grid contain distinct species pairs (A = ancestral, E = strep evolved). Colors show Streptomycin concentration in μg/ml and point shape shows the initial mixing ratio of each species (in the same order as species listed in each panel). Note that data from the first growth cycle (after 48 hours) is excluded for ease of viewing.\n\n\n\n\n2.3.1 Trios with first growth cycle\n\nShow/hide code\nplot_od_grid(trios_combo, remove_first_cycle = FALSE, ncol = 4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: As in Figure 3 but including data from the first growth cycle.",
    "crumbs": [
      "3. Community growth - optical density",
      "i) Process and plot OD data"
    ]
  },
  {
    "objectID": "R/communities/optical_density/01_format_plot_od.html#quartets",
    "href": "R/communities/optical_density/01_format_plot_od.html#quartets",
    "title": "Formatting and plotting optical density data",
    "section": "2.4 Quartets",
    "text": "2.4 Quartets\n\n\nShow/hide code\nfig_quarts &lt;- plot_od_grid(quart_combo, remove_first_cycle = TRUE, ncol = 4)\n\n# ggsave(\n#   here::here(\"figs\", \".svg\"),\n#   fig01,\n#   width = 7,\n#   height = 12,\n#   units = \"in\",\n#   device = \"svg\"\n# )\n# \n# ggsave(\n#   here::here(\"figs\", \".png\"),\n#   fig01,\n#   width = 7,\n#   height = 12,\n#   units = \"in\",\n#   device = \"png\"\n# )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Species quartets optical density (y-axis) over series of 48 hour growth cycles (x-axis, 16 days total). Different panels in the grid contain distinct species pairs (A = ancestral, E = strep evolved). Colors show Streptomycin concentration in μg/ml and point shape shows the initial mixing ratio of each species (in the same order as species listed in each panel). Note that data from the first growth cycle (after 48 hours) is excluded for ease of viewing.\n\n\n\n\n2.4.1 Quartets with first growth cycle\n\nShow/hide code\nplot_od_grid(quart_combo, remove_first_cycle = FALSE, ncol = 4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: As in Figure 5 but including data from the first growth cycle.",
    "crumbs": [
      "3. Community growth - optical density",
      "i) Process and plot OD data"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/02_trios.html",
    "href": "R/communities/experiment_design/02_trios.html",
    "title": "Designing three-species subcommunities",
    "section": "",
    "text": "Show/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggplate)\n\n\n\n\n\n\n\nShow/hide code\ndata &lt;- here::here(\"data\", \"communities\", \"experiment_design\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)\n\n\n\n\n\nSpecies color vector\n\n\nShow/hide code\nmy_colors &lt;- c(\n  \"ANC_0403_10\" = \"#ffaaaa\", \"ANC_0403_70\" = \"#aa0000\", \"ANC_0403_80\" = \"#aa0000\", \"ANC_0403_90\" = \"#aa0000\", \n  \"ANC_1287_10\" = \"#ffeeaa\", \"ANC_1287_70\" = \"#d4aa00\", \"ANC_1287_80\" = \"#d4aa00\", \"ANC_1287_90\" = \"#d4aa00\", \n  \"ANC_1896_10\" = \"#ccffaa\", \"ANC_1896_70\" = \"#44aa00\", \"ANC_1896_80\" = \"#44aa00\", \"ANC_1896_90\" = \"#44aa00\", \n  \"ANC_1977_10\" = \"#aaccff\", \"ANC_1977_70\" = \"#0055d4\", \"ANC_1977_80\" = \"#0055d4\", \"ANC_1977_90\" = \"#0055d4\",\n  \"EVO_0403_10\" = \"#ffaaee\", \"EVO_0403_70\" = \"#ff00cc\", \"EVO_0403_80\" = \"#ff00cc\", \"EVO_0403_90\" = \"#ff00cc\", \n  \"EVO_1287_10\" = \"#ffccaa\", \"EVO_1287_70\" = \"#ff6600\", \"EVO_1287_80\" = \"#ff6600\", \"EVO_1287_90\" = \"#ff6600\", \n  \"EVO_1896_10\" = \"#aaffee\", \"EVO_1896_70\" = \"#00ffcc\", \"EVO_1896_80\" = \"#00ffcc\", \"EVO_1896_90\" = \"#00ffcc\", \n  \"EVO_1977_10\" = \"#ccaaff\", \"EVO_1977_70\" = \"#7f2aff\", \"EVO_1977_80\" = \"#7f2aff\", \"EVO_1977_90\" = \"#7f2aff\"\n  )\n\n\nFor plotting plates\n\n\nShow/hide code\nplate_plot_steps &lt;- function(df, well_colmun, val_column, step, colr_vec){\n  ggplate::plate_plot(df,\n  position = {{ well_colmun }},\n  value = {{ val_column }},\n  colour = colr_vec,\n  plate_size = 96,\n  plate_type = \"round\"\n) + ggtitle(step)\n}",
    "crumbs": [
      "2. Community growth - experiment design",
      "ii) Species trios - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/02_trios.html#libraries",
    "href": "R/communities/experiment_design/02_trios.html#libraries",
    "title": "Designing three-species subcommunities",
    "section": "",
    "text": "Show/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggplate)",
    "crumbs": [
      "2. Community growth - experiment design",
      "ii) Species trios - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/02_trios.html#global-variables",
    "href": "R/communities/experiment_design/02_trios.html#global-variables",
    "title": "Designing three-species subcommunities",
    "section": "",
    "text": "Show/hide code\ndata &lt;- here::here(\"data\", \"communities\", \"experiment_design\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "2. Community growth - experiment design",
      "ii) Species trios - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/02_trios.html#functions-and-vars",
    "href": "R/communities/experiment_design/02_trios.html#functions-and-vars",
    "title": "Designing three-species subcommunities",
    "section": "",
    "text": "Species color vector\n\n\nShow/hide code\nmy_colors &lt;- c(\n  \"ANC_0403_10\" = \"#ffaaaa\", \"ANC_0403_70\" = \"#aa0000\", \"ANC_0403_80\" = \"#aa0000\", \"ANC_0403_90\" = \"#aa0000\", \n  \"ANC_1287_10\" = \"#ffeeaa\", \"ANC_1287_70\" = \"#d4aa00\", \"ANC_1287_80\" = \"#d4aa00\", \"ANC_1287_90\" = \"#d4aa00\", \n  \"ANC_1896_10\" = \"#ccffaa\", \"ANC_1896_70\" = \"#44aa00\", \"ANC_1896_80\" = \"#44aa00\", \"ANC_1896_90\" = \"#44aa00\", \n  \"ANC_1977_10\" = \"#aaccff\", \"ANC_1977_70\" = \"#0055d4\", \"ANC_1977_80\" = \"#0055d4\", \"ANC_1977_90\" = \"#0055d4\",\n  \"EVO_0403_10\" = \"#ffaaee\", \"EVO_0403_70\" = \"#ff00cc\", \"EVO_0403_80\" = \"#ff00cc\", \"EVO_0403_90\" = \"#ff00cc\", \n  \"EVO_1287_10\" = \"#ffccaa\", \"EVO_1287_70\" = \"#ff6600\", \"EVO_1287_80\" = \"#ff6600\", \"EVO_1287_90\" = \"#ff6600\", \n  \"EVO_1896_10\" = \"#aaffee\", \"EVO_1896_70\" = \"#00ffcc\", \"EVO_1896_80\" = \"#00ffcc\", \"EVO_1896_90\" = \"#00ffcc\", \n  \"EVO_1977_10\" = \"#ccaaff\", \"EVO_1977_70\" = \"#7f2aff\", \"EVO_1977_80\" = \"#7f2aff\", \"EVO_1977_90\" = \"#7f2aff\"\n  )\n\n\nFor plotting plates\n\n\nShow/hide code\nplate_plot_steps &lt;- function(df, well_colmun, val_column, step, colr_vec){\n  ggplate::plate_plot(df,\n  position = {{ well_colmun }},\n  value = {{ val_column }},\n  colour = colr_vec,\n  plate_size = 96,\n  plate_type = \"round\"\n) + ggtitle(step)\n}",
    "crumbs": [
      "2. Community growth - experiment design",
      "ii) Species trios - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/02_trios.html#format-and-save",
    "href": "R/communities/experiment_design/02_trios.html#format-and-save",
    "title": "Designing three-species subcommunities",
    "section": "2.1 Format and save",
    "text": "2.1 Format and save\n\n\nShow/hide code\ncombos03_filt_wells %&gt;%\n  group_by(a, b, c) %&gt;% \n  mutate(microcosm_id = cur_group_id()) %&gt;% \n  ungroup() %&gt;% \n  mutate(a_sp = paste0(str_split_i(a, \"_\", 2), stringr::str_extract(str_split_i(a, \"_\", 1), \"^.{1}\")),\n         b_sp = paste0(str_split_i(b, \"_\", 2), stringr::str_extract(str_split_i(b, \"_\", 1), \"^.{1}\")),\n         c_sp = paste0(str_split_i(c, \"_\", 2), stringr::str_extract(str_split_i(c, \"_\", 1), \"^.{1}\")),\n         a_f = str_split_i(a, \"_\", 3),\n         b_f = str_split_i(b, \"_\", 3),\n         c_f = str_split_i(c, \"_\", 3)) %&gt;% \n  arrange(well) %&gt;% \n  dplyr::select(microcosm_id, well, a, a_sp, a_f, b, b_sp, b_f, c, c_sp, c_f) %&gt;% \n  readr::write_tsv(here::here(data, \"trios_sample_composition_wide.tsv\"))\n\n\n\n\nShow/hide code\ncombos03_filt_wells %&gt;%\n  group_by(a, b, c) %&gt;% \n  mutate(microcosm_id = cur_group_id()) %&gt;% \n  ungroup() %&gt;% \n  dplyr::select(a:c, well, microcosm_id) %&gt;% \n  tidyr::pivot_longer(c(-well, -microcosm_id)) %&gt;% \n  tidyr::separate(value, c(\"evo_hist\", \"strainID\", \"target_f\")) %&gt;% \n  dplyr::mutate(evo_hist = stringr::str_to_lower(evo_hist),\n                strainID = paste0(\"HAMBI_\", strainID),\n                target_f = as.numeric(target_f)/100,\n                n_species = 3) %&gt;% \n  dplyr::select(-name) %&gt;% \n  dplyr::relocate(microcosm_id, n_species) %&gt;% \n  readr::write_tsv(here::here(data, \"trios_sample_composition_long.tsv\"))",
    "crumbs": [
      "2. Community growth - experiment design",
      "ii) Species trios - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/02_trios.html#first-pipetting-step",
    "href": "R/communities/experiment_design/02_trios.html#first-pipetting-step",
    "title": "Designing three-species subcommunities",
    "section": "3.1 First pipetting step",
    "text": "3.1 First pipetting step\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Layout for the first pipetting step for constructing trios Different colors show different species/evolution combinations. The darkness of the color indicates whether a species/evolution combo is added at 80% (e.g., _80) or 10% (e.g., _10).",
    "crumbs": [
      "2. Community growth - experiment design",
      "ii) Species trios - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/02_trios.html#second-pipetting-step",
    "href": "R/communities/experiment_design/02_trios.html#second-pipetting-step",
    "title": "Designing three-species subcommunities",
    "section": "3.2 Second pipetting step",
    "text": "3.2 Second pipetting step\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Layout for the second pipetting step for constructing trios Different colors show different species/evolution combinations. The darkness of the color indicates whether a species/evolution combo is added at 80% (e.g., _80) or 10% (e.g., _10).",
    "crumbs": [
      "2. Community growth - experiment design",
      "ii) Species trios - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/02_trios.html#third-pipetting-step",
    "href": "R/communities/experiment_design/02_trios.html#third-pipetting-step",
    "title": "Designing three-species subcommunities",
    "section": "3.3 Third pipetting step",
    "text": "3.3 Third pipetting step\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Layout for the third pipetting step for constructing trios Different colors show different species/evolution combinations. The darkness of the color indicates whether a species/evolution combo is added at 80% (e.g., _80) or 10% (e.g., _10).",
    "crumbs": [
      "2. Community growth - experiment design",
      "ii) Species trios - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/amplicon/03_analysis_trios.html",
    "href": "R/communities/amplicon/03_analysis_trios.html",
    "title": "Analysis of trio competition",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(scales)\nlibrary(patchwork)\nlibrary(broom)\nlibrary(ggraph)\nlibrary(ggh4x)\nlibrary(tidygraph)\nsource(here::here(\"R\", \"utils_generic.R\"))\n#source(here::here(\"R\", \"communities\", \"amplicon\", \"utils_amplicon.R\"))\n\n\n\n\n\n\n\nShow/hide code\ndata &lt;- here::here(\"data\", \"communities\")\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "ii) Species trios"
    ]
  },
  {
    "objectID": "R/communities/amplicon/03_analysis_trios.html#libraries",
    "href": "R/communities/amplicon/03_analysis_trios.html#libraries",
    "title": "Analysis of trio competition",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(scales)\nlibrary(patchwork)\nlibrary(broom)\nlibrary(ggraph)\nlibrary(ggh4x)\nlibrary(tidygraph)\nsource(here::here(\"R\", \"utils_generic.R\"))\n#source(here::here(\"R\", \"communities\", \"amplicon\", \"utils_amplicon.R\"))",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "ii) Species trios"
    ]
  },
  {
    "objectID": "R/communities/amplicon/03_analysis_trios.html#global-variables",
    "href": "R/communities/amplicon/03_analysis_trios.html#global-variables",
    "title": "Analysis of trio competition",
    "section": "",
    "text": "Show/hide code\ndata &lt;- here::here(\"data\", \"communities\")\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "ii) Species trios"
    ]
  },
  {
    "objectID": "R/communities/amplicon/03_analysis_trios.html#species-abundances",
    "href": "R/communities/amplicon/03_analysis_trios.html#species-abundances",
    "title": "Analysis of trio competition",
    "section": "2.1 Species abundances",
    "text": "2.1 Species abundances\n\n\nShow/hide code\nsamp_trios &lt;- readr::read_tsv(here::here(data, \"3sps_compiled.tsv\")) %&gt;% \n  dplyr::rename(f = f_thresh)",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "ii) Species trios"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(archive)\nlibrary(scales)\nsource(here::here(\"R\", \"utils_generic.R\"))\nsource(here::here(\"R\", \"communities\", \"amplicon\", \"utils_amplicon.R\"))\n\n\n\n\n\n\n\nShow/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"communities\", \"20241024_BTK_illumina_v3\")\ndata &lt;- here::here(\"data\", \"communities\", \"20241024_BTK_illumina_v3\")\namplicontar &lt;- here::here(data_raw, \"rbec_output.tar.gz\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)\n\n# create temporary location to decompress\ntmpdir &lt;- fs::file_temp()",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#libraries",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#libraries",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(archive)\nlibrary(scales)\nsource(here::here(\"R\", \"utils_generic.R\"))\nsource(here::here(\"R\", \"communities\", \"amplicon\", \"utils_amplicon.R\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#global-variables",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#global-variables",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "",
    "text": "Show/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"communities\", \"20241024_BTK_illumina_v3\")\ndata &lt;- here::here(\"data\", \"communities\", \"20241024_BTK_illumina_v3\")\namplicontar &lt;- here::here(data_raw, \"rbec_output.tar.gz\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)\n\n# create temporary location to decompress\ntmpdir &lt;- fs::file_temp()",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#untar-rbec-output-tarball",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#untar-rbec-output-tarball",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "3.1 Untar Rbec output tarball",
    "text": "3.1 Untar Rbec output tarball\n\n\nShow/hide code\narchive::archive_extract(\n  amplicontar,\n  dir = tmpdir,\n  files = NULL,\n  options = character(),\n  strip_components = 0L\n)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#setup-directory-structure",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#setup-directory-structure",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "3.2 Setup directory structure",
    "text": "3.2 Setup directory structure\n\n\nShow/hide code\ntabdir &lt;- here::here(tmpdir, \"rbec_output\")\nsamppaths &lt;- fs::dir_ls(tabdir)\nsampnames &lt;- path_split(samppaths) %&gt;% \n  map_chr(dplyr::last)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#read",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#read",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "3.3 Read",
    "text": "3.3 Read\n\n\nShow/hide code\nstraintabs &lt;- paste0(samppaths, \"/strain_table.txt\") %&gt;% \n  set_names(sampnames) %&gt;% \n  map_df(\n  read_tsv,\n  skip = 1,\n  col_names = c(\"rRNA16S_locus\",\"count\"),\n  show_col_types = FALSE, \n  .id = \"sample\")",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#clean-up",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#clean-up",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "3.4 Clean up",
    "text": "3.4 Clean up\n\n\nShow/hide code\n# remove decompressed directory from temp location\nfs::dir_delete(tmpdir)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#negative-controls",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#negative-controls",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.1 Negative controls",
    "text": "5.1 Negative controls\nFirst, we’ll check whether the experimental and plate negative controls look good\nLets check what species are contaminating negative controls. Most appear to be low abundance contaminants of species excluded from the experiment. Probably this is cross talk from the positive controls and other samples\n\nShow/hide code\nfinaltable %&gt;% \n  filter(str_detect(community_type, \"^neg\")) %&gt;% \n  filter(f_raw &gt; 0) %&gt;%\n  contam_histogram(trans=TRUE, x = f_raw) +\n  labs(x = \"Frequency distribution of each species in the negative controls\", y = \"Sample count\") +\n  facet_wrap(~strainID)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Frequency distribution of all species in the negative controls\n\n\n\n\nShow/hide code\nfinaltable %&gt;% \n  filter(str_detect(community_type, \"^neg\")) %&gt;% \n  filter(str_detect(strainID, \"0403|1287|1896|1977\")) %&gt;% \n  filter(f_raw &gt; 0) %&gt;% \n  contam_histogram(trans=TRUE, x = f_raw) +\n  labs(x = \"Frequency distribution of each species in the negative controls\", y = \"Sample count\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Frequency distribution of only target target species in the negative controls\n\n\n\n\n\n\nShow/hide code\nod &lt;- read_tsv(here::here(\"_data_raw\", \"communities\", \"optical_density\", \"20240829_tqs\", \"optical_density_formatted_102024.txt\")) %&gt;% \n  mutate(well = stringr::str_replace(well,\n                     pattern = \"([0-9]+)\", \n                     replacement = {\\(x) stringr::str_pad(string = x, width = 2,  side = \"left\",  pad = \"0\")}))\n\n\nAll negative control have very low OD &lt; 0.1 and it is safe to assume that they are clean.\n\n\nShow/hide code\ndf &lt;- left_join(finaltable, od, by = join_by(sample, transfers==transfer, replicate, strep_conc)) %&gt;% \n  filter(str_detect(community_type, \"^neg\")) %&gt;% \n  dplyr::select(sample, OD, well, community_type, n_species.x, n_species.y, replicate) %&gt;% \n  distinct() %&gt;% \n  filter(!is.na(OD))\n\n\nAll negative control have very low OD &lt; 0.1 and low read counts it is safe to assume that they are clean.\n\nShow/hide code\ndf %&gt;% \n  left_join(finaltable, by = join_by(sample, community_type, replicate, n_species.x==n_species)) %&gt;% \n  filter(f_raw &gt; 0) %&gt;% \n  filter(str_detect(strainID, \"0403|1287|1896|1977\")) %&gt;% \n  dplyr::select(sample_tot_raw, sample, OD, community_type) %&gt;% \n  distinct() %&gt;% \n  pivot_longer(c(-sample, -community_type)) %&gt;% \n  ggplot(aes(x = value)) +\n  geom_histogram(bins = 5) +\n  facet_grid(~name, scales = \"free_x\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: Optical density (OD) and total read count distributions of negative controls.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#positive-controls",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#positive-controls",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.2 Positive controls",
    "text": "5.2 Positive controls\nThe positive community controls should each have all 23 species.\n\n\nShow/hide code\nfinaltable %&gt;% \n  filter(str_detect(community_type, \"^pos\") & count_correct &gt; 0) %&gt;% \n  group_by(sample) %&gt;%\n  mutate(n_sp_detected = n()) %&gt;% \n  distinct(sample, sample_tot_raw, n_sp_detected)\n\n\n\n  \n\n\n\n2/3 community controls have plenty of reads and look normal. One has under 1000 reads in total and it only contains the 4 focal species (0403, 1287, 1896, 1977). It looks to me that this could be a mislabeled negative control?",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#misassigned-reads",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#misassigned-reads",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.3 Misassigned reads",
    "text": "5.3 Misassigned reads\nThese libraries were only prepared with samples containing HAMBI_0403, HAMBI_1287, HAMBI_1896, and HAMBI_1977 so any time species other than these show up is just an incorrect assignment by Rbec or index leakage/crosstalk from the positive community controls. Let’s check quickly how many of these there are…\n\n\nShow/hide code\nfinaltable %&gt;% \n  # filter out community controls since they have all hambi species\n  filter(!(sample %in% c(\"4_p09_A01\", \"4_p10_A01\", \"4m_p18_A01\" ))) %&gt;% \n  filter(!str_detect(strainID, \"0403|1287|1896|1977\")) %&gt;% \n  filter(count_correct &gt; 0) %&gt;% \n  arrange(desc(count_correct))\n\n\n\n  \n\n\n\nthere are only very small number of reads mapping to off-target species per experimental sample probably from crosstalk leakage.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#samples-with-few-total-reads",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#samples-with-few-total-reads",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.4 Samples with few total reads",
    "text": "5.4 Samples with few total reads\nSome of the experimental pairs had streptomycin concentrations higher than any of the species individually could tolerate. We would expect then that no species would grow successfully in these samples and that the overall biomass would be very low, thus resulting in a low number of recovered reads from these samples.\nTo look into this. first let’s check which samples have very low OD600 in the endpoint samples. We’ll filter out samples with an OD of less than 0.1 and also samples with fewer than 1000 reads. It is generally good practice to exclude samples with low number of reads.\n\n\nShow/hide code\nleft_join(finaltable, od, \n          by = join_by(sample, transfers==transfer, replicate, strep_conc)) %&gt;% \n  filter(transfers == 8) %&gt;% \n  filter(OD &lt; 0.1 | sample_tot_raw &lt; 3000) %&gt;% \n  distinct(sample, community_type, OD, sample_tot_raw) %&gt;% \n  count(community_type)\n\n\n\n  \n\n\n\nSamples with low reads or low OD are all negative controls or the one positive control that failed (plus another positive control 4_p10_A01 but this must be from mislabeling because there were no positive controls actually on the experimental plates).",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#filter-to-target-species",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#filter-to-target-species",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.5 Filter to target species",
    "text": "5.5 Filter to target species\nExclude positive and negative controls and also exclude species that are not in the focal 4\n\n\nShow/hide code\nfinaltable_exp_mstr &lt;- finaltable %&gt;% \n  filter(community_type %nin% c(\"empty\", \"neg_control\", \"pos_control\")) %&gt;% \n  # no low-read samples to filter\n  #filter(sample %nin% lowread_samps) %&gt;% \n  filter(strainID %in% c(\"HAMBI_0403\", \"HAMBI_1287\", \"HAMBI_1896\", \"HAMBI_1977\")) %&gt;% \n  group_by(sample) %&gt;% \n  mutate(f_raw_targetsp = count_correct/sum(count_correct),\n         sample_tot_targetsp = sum(count_correct)) %&gt;% \n  ungroup() %&gt;% \n  relocate(c(sample_tot_targetsp, f_raw_targetsp), .after = f_raw)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#masterplate-samples",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#masterplate-samples",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.6 Masterplate samples",
    "text": "5.6 Masterplate samples\n\n5.6.1 Pairs\nSomething a bit weird is going on with two of the masterplate pairs. Samples P19 and P20 both somehow have ~20 of HAMBI_0403 present in them. However, the rest of the species composition looks like how we expect them. I think we will keep these two masterplate samples and just filter out the HAMBI_0403 that shouldn’t be there\n\n\nShow/hide code\nfinaltable_exp_mstr %&gt;%\n  filter(str_detect(community_type, \"masterplate\") & n_species == 2)  %&gt;% \n  dplyr::select(sample, strainID, f_raw_targetsp, target_f, evo_hist) %&gt;% \n  mutate(f_raw_targetsp = round(f_raw_targetsp, 2)) %&gt;% \n  distinct()\n\n\n\n  \n\n\n\n\nShow/hide code\nfinaltable_exp_mstr %&gt;%\n  filter(str_detect(community_type, \"masterplate\") & n_species == 2) %&gt;% \n  contaminated_barplot(threshold = 0, quartet = FALSE, y=f_raw_targetsp) +\n  ggtitle(\"Masterplate pairs with contamination\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Species composition of masterplate pairs that contain any percentage (&gt; 0%) of a species that shouldn’t be there (shown in grey to black).\n\n\n\n\n\n5.6.2 Trios\nTrio masterplates look quite good. Yes, there are some samples where a species that shouldn’t be there is &gt; 3%, but these are always &lt; 5% and there are no samples with major contamination\n\nShow/hide code\nfinaltable_exp_mstr %&gt;%\n  filter(str_detect(notes, \"trios\") & str_detect(notes, \"masterplate\")) %&gt;% \n  contaminated_barplot(threshold = 0.01, quartet = FALSE, y=f_raw_targetsp) +\n  ggtitle(\"Masterplate trios with contamination\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: Species composition of masterplate pairs that contain &gt;= 1% of a species that shouldn’t be there (shown in grey to black).\n\n\n\n\nShow/hide code\nfinaltable_exp_mstr %&gt;%\n  filter(str_detect(notes, \"trios\") & str_detect(notes, \"masterplate\")) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw &gt; 0) %&gt;% \n  contam_histogram(trans = FALSE, x = f_raw_targetsp) +\n  labs(x = \"Species frequency\", y = \"Sample count\") +\n  ggtitle(\"Frequency distribution of misassigned species in masterplate trios\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Frequency distribution of each species in masterplate samples where it should not occur. The 1% mark (commonly accepted as an acceptable Illumina cross-talk standard) is demarcated with a dashed line.\n\n\n\n\nShow/hide code\nfinaltable_exp_mstr %&gt;%\n  filter(str_detect(notes, \"trios\") & str_detect(notes, \"masterplate\")) %&gt;% \n  filter(!is.na(evo_hist)) %&gt;% \n  filter(f_raw &gt; 0) %&gt;% \n  contam_histogram(trans = FALSE, x = f_raw_targetsp) +\n  labs(x = \"Species frequency\", y = \"Sample count\") +\n  ggtitle(\"Frequency distribution of focal species in masterplate trios\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: Frequency distribution of each species in all samples where it should occur.\n\n\n\n\n\n5.6.3 Quartets\nOne weakness of this contamination-detection approach is that there is no way to tell from this data whether a quartet masterplate is contaminated because every quartet (by definition) is inoculated with all of the 4 species at different frequencies and with different evolutionary histories. See Section 5.7.3 below for more information. However, we can still visualize the composition of those quartets and whether they seem to be close to what we expected to put in.\n\nShow/hide code\nfinaltable_exp_mstr %&gt;%\n  filter(str_detect(notes, \"quartets\") & str_detect(notes, \"masterplate\")) %&gt;% \n  contaminated_barplot(threshold = 0.01, quartet = TRUE, y = f_raw_targetsp) +\n  ggtitle(\"All masterplate quartets\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 9: Species composition of masterplate quartets.\n\n\n\nThese look really good and are clearly following the correct pattern/distribution for the quartets.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#experimental-samples",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#experimental-samples",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.7 Experimental samples",
    "text": "5.7 Experimental samples\nWe may need to use a higher threshold than 1% (e.g., 3% frequency) because over 3% we can reliably say that a species is present and it is not due to index cross talk.\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\")) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw &gt; 0.03 ) %&gt;% \n  contam_histogram(trans=TRUE, x = f_raw_targetsp) +\n  labs(x = \"Species frequency\", y = \"Sample count\") +\n  ggtitle(\"Frequency distribution of each species exceeding the 3% threshold\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 10: Frequency distribution of each species in experimental samples where it should not occur and where it exceeds a 3% threshold.\n\n\n\n\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  # there are only experiment samples left\n  filter(str_detect(community_type, \"experiment\")) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw_targetsp &gt; 0.03 ) %&gt;% \n  dplyr::select(sample, strainID, f_raw_targetsp) %&gt;% \n  arrange(desc(f_raw_targetsp))\n\n\n\n  \n\n\n\nThere are 11 samples (2% of 498 samples) that exceed a 3% crosstalk threshold. 9 samples (2% of 498 samples) have contamination &lt;= 8% and 2 samples (0 % of 498 samples) have &gt; 8% of a species that should not be there. In most cases the species in highly contaminated samples is HAMBI_1977. I think these 2 samples are probably at very high risk for legitimate contamination. It is likely that the rest of the 9 samples with &lt;= 8% contamination are not contaminated but just crosstalk outliers.\n\n5.7.1 Pairs\nHere just taking a closer look at the pairs from the experiment that appear to be contaminated.\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\") & n_species == 2) %&gt;% \n  contaminated_barplot(threshold = 0.03, quartet = FALSE, y=f_raw_targetsp) +\n  ggtitle(\"Experiment pairs with &gt; 3% contamination\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 11: Species composition of pairs masterplates samples that contain &gt; 3% of a species that shouldn’t be there (shown in grey to black).\n\n\n\nAll experimental pair samples look pretty good. I think we should only exclude samples where the contamination is very high (over ~50% of the sample) but those with around 10% or less contaminant I think can be retained. So we will not need filter any of these out.\n\n\n5.7.2 Trios\nHere just taking a closer look at the trios from the experiment that appear to be contaminated.\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\") & n_species == 3) %&gt;% \n  contaminated_barplot(threshold=0.03, quartet = FALSE, y=f_raw_targetsp) +\n  ggtitle(\"Experiment trios with &gt; 3% contamination\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 12: Species composition of experiment trio samples that contain &gt; 3% of a species that shouldn’t be there (shown in grey to black).\n\n\n\nOnly 2 trio samples look really bad (over 10 %, more like 50 % contamination). Again, I think we should only exclude samples where the contamination is very high (over ~50% of the sample) but those with around 10% or less contaminant I think can be retained, and I will discard the contaminating sequences.\n\n\nShow/hide code\ncontamtrios &lt;- finaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\") & n_species == 3) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw_targetsp &gt; 0.13  ) %&gt;% \n  pull(sample)\n\n\n\n\n5.7.3 Quartets\nAgain, one weakness of this approach is that there is no way to tell from this data whether a quartet is contaminated because every quartet (by definition) is inoculated with all of the 4 species at different frequencies and with different evolutionary histories. Thus we would expect to see either all 4 species present or a subset of the 4 species in the quartet samples, but we cannot tell if these patterns come from contamination or not. Moving forward we just have to assume that the quartets are OK… However, we’ve found so little contamination in our other experimental samples and all samples were handled in the experiment and processed for sequence library preparation in the same way. I think it is safe to assume that contamination in the quartets is minimal issue.\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\")) %&gt;% \n  filter(n_species == 4) %&gt;% \n  group_by(sample) %&gt;% \n  mutate(id = cur_group_id()) %&gt;% \n  ungroup() %&gt;% \n  mutate(facet = ntile(id, 4)) %&gt;% \n  contaminated_barplot(threshold = 0, quartet = TRUE, y=f_raw_targetsp) +\n  ggtitle(\"All experimental quartets\") +\n  facet_wrap(~facet, scales=\"free_x\", nrow=4) +\n  theme(\n    strip.background = element_blank(),\n    strip.text.x = element_blank(),\n    legend.position = \"bottom\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 13: Species composition of masterplate quartets.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#pairs-2",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#pairs-2",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "6.1 Pairs",
    "text": "6.1 Pairs\nWrite the pair samples\n\n\nShow/hide code\nfinaltable_exp_mstr_export %&gt;% \n  filter(n_species == 2) %&gt;% \n  arrange(sample) %&gt;% \n  write_tsv(here::here(data, \"pairs_counts.tsv\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#trios-2",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#trios-2",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "6.2 Trios",
    "text": "6.2 Trios\nWrite the trio samples\n\n\nShow/hide code\nfinaltable_exp_mstr_export %&gt;% \n  filter(n_species == 3) %&gt;% \n  arrange(sample) %&gt;% \n  write_tsv(here::here(data, \"trios_counts.tsv\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#quartets-1",
    "href": "R/communities/amplicon/20241024_BTK_illumina_v3/01_format_rbec_tab.html#quartets-1",
    "title": "Formatting Rbec output from 2024-10-20 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "6.3 Quartets",
    "text": "6.3 Quartets\nWrite the quartet samples\n\n\nShow/hide code\nfinaltable_exp_mstr_export %&gt;% \n  filter(n_species == 4) %&gt;% \n  arrange(sample) %&gt;% \n  write_tsv(here::here(data, \"quartets_counts.tsv\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iii) Batch 2024-10-24"
    ]
  },
  {
    "objectID": "R/communities/amplicon/01_compile_format.html",
    "href": "R/communities/amplicon/01_compile_format.html",
    "title": "Analysis of pairwise competition",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\n\n\n\n\n\n\n\nShow/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"communities\")\ndata &lt;- here::here(\"data\", \"communities\")\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "v) Compile pairs, trios, quartets"
    ]
  },
  {
    "objectID": "R/communities/amplicon/01_compile_format.html#libraries",
    "href": "R/communities/amplicon/01_compile_format.html#libraries",
    "title": "Analysis of pairwise competition",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "v) Compile pairs, trios, quartets"
    ]
  },
  {
    "objectID": "R/communities/amplicon/01_compile_format.html#global-variables",
    "href": "R/communities/amplicon/01_compile_format.html#global-variables",
    "title": "Analysis of pairwise competition",
    "section": "",
    "text": "Show/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"communities\")\ndata &lt;- here::here(\"data\", \"communities\")\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "v) Compile pairs, trios, quartets"
    ]
  },
  {
    "objectID": "R/communities/amplicon/01_compile_format.html#compiled-pairs-data",
    "href": "R/communities/amplicon/01_compile_format.html#compiled-pairs-data",
    "title": "Analysis of pairwise competition",
    "section": "2.1 Compiled pairs data",
    "text": "2.1 Compiled pairs data\n\n\nShow/hide code\nbind_rows(read_tsv(here::here(data, \"20240711_BTK_illumina_v3\", \"pairs_counts.tsv\"), col_types = \"cccddddddccc\"),\n          read_tsv(here::here(data, \"20241024_BTK_illumina_v3\", \"pairs_counts.tsv\"), col_types = \"cccddddddccc\")) %&gt;% \n  # these steps ensure we don't get duplicates of some masteplate samples sequenced again in the second batch\n  # filtering to keep samples closest to the target f value\n  mutate(del_f = abs(f_thresh-target_f_masterplate)) %&gt;% \n  group_by(sample, strainID) %&gt;% \n  filter(if_else(community_type == \"masterplate\", del_f == min(del_f), TRUE )) %&gt;% \n  ungroup() %&gt;% \n  dplyr::select(-del_f) %&gt;% \n  write_tsv(here::here(data, \"2sps_compiled.tsv\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "v) Compile pairs, trios, quartets"
    ]
  },
  {
    "objectID": "R/communities/amplicon/01_compile_format.html#compiled-trios-data",
    "href": "R/communities/amplicon/01_compile_format.html#compiled-trios-data",
    "title": "Analysis of pairwise competition",
    "section": "2.2 Compiled trios data",
    "text": "2.2 Compiled trios data\n\n\nShow/hide code\nbind_rows(read_tsv(here::here(data, \"20240711_BTK_illumina_v3\", \"trios_counts.tsv\"), col_types = \"cccddddddccc\"),\n          read_tsv(here::here(data, \"20241024_BTK_illumina_v3\", \"trios_counts.tsv\"), col_types = \"cccddddddccc\"),\n          read_tsv(here::here(data, \"20250127_BTK_illumina_v3\", \"trios_counts.tsv\"), col_types = \"cccddddddccc\")) %&gt;% \n  write_tsv(here::here(data, \"3sps_compiled.tsv\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "v) Compile pairs, trios, quartets"
    ]
  },
  {
    "objectID": "R/communities/amplicon/01_compile_format.html#compiled-quartets-data",
    "href": "R/communities/amplicon/01_compile_format.html#compiled-quartets-data",
    "title": "Analysis of pairwise competition",
    "section": "2.3 Compiled quartets data",
    "text": "2.3 Compiled quartets data\n\n\nShow/hide code\nbind_rows(read_tsv(here::here(data, \"20241024_BTK_illumina_v3\", \"quartets_counts.tsv\"), col_types = \"cccddddddccc\"),\n          read_tsv(here::here(data, \"20250127_BTK_illumina_v3\", \"quartets_counts.tsv\"), col_types = \"cccddddddccc\")) %&gt;% \n  write_tsv(here::here(data, \"4sps_compiled.tsv\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "v) Compile pairs, trios, quartets"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(archive)\nlibrary(scales)\nsource(here::here(\"R\", \"utils_generic.R\"))\nsource(here::here(\"R\", \"communities\", \"amplicon\", \"utils_amplicon.R\"))\n\n\n\n\n\n\n\nShow/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"communities\", \"20240711_BTK_illumina_v3\")\ndata &lt;- here::here(\"data\", \"communities\", \"20240711_BTK_illumina_v3\")\namplicontar &lt;- here::here(data_raw, \"rbec_output.tar.gz\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)\n\n# create temporary location to decompress\ntmpdir &lt;- fs::file_temp()",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#libraries",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#libraries",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(archive)\nlibrary(scales)\nsource(here::here(\"R\", \"utils_generic.R\"))\nsource(here::here(\"R\", \"communities\", \"amplicon\", \"utils_amplicon.R\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#global-variables",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#global-variables",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "",
    "text": "Show/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"communities\", \"20240711_BTK_illumina_v3\")\ndata &lt;- here::here(\"data\", \"communities\", \"20240711_BTK_illumina_v3\")\namplicontar &lt;- here::here(data_raw, \"rbec_output.tar.gz\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)\n\n# create temporary location to decompress\ntmpdir &lt;- fs::file_temp()",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#untar-rbec-output-tarball",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#untar-rbec-output-tarball",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "3.1 Untar Rbec output tarball",
    "text": "3.1 Untar Rbec output tarball\n\n\nShow/hide code\narchive::archive_extract(\n  amplicontar,\n  dir = tmpdir,\n  files = NULL,\n  options = character(),\n  strip_components = 0L\n)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#setup-directory-structure",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#setup-directory-structure",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "3.2 Setup directory structure",
    "text": "3.2 Setup directory structure\n\n\nShow/hide code\ntabdir &lt;- here::here(tmpdir, \"rbec_output\")\nsamppaths &lt;- fs::dir_ls(tabdir)\nsampnames &lt;- path_split(samppaths) %&gt;% \n  map_chr(dplyr::last)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#read",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#read",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "3.3 Read",
    "text": "3.3 Read\n\n\nShow/hide code\nstraintabs &lt;- paste0(samppaths, \"/strain_table.txt\") %&gt;% \n  set_names(sampnames) %&gt;% \n  map_df(\n  read_tsv,\n  skip = 1,\n  col_names = c(\"rRNA16S_locus\",\"count\"),\n  show_col_types = FALSE, \n  .id = \"sample\") %&gt;% \n  # naming scheme inconsistent for one sample\n  mutate(sample = if_else(sample == \"P2_s_0\", \"P02_s_0\", sample))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#clean-up",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#clean-up",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "3.4 Clean up",
    "text": "3.4 Clean up\n\n\nShow/hide code\n# remove decompressed directory from temp location\nfs::dir_delete(tmpdir)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#negative-controls",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#negative-controls",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.1 Negative controls",
    "text": "5.1 Negative controls\nLets check what species are contaminating negative controls. Most appear to be low abundance contaminants of species excluded from the experiment. Probably this is cross talk from the positive controls and other samples\n\nShow/hide code\nfinaltable %&gt;% \n  filter(str_detect(community_type, \"^neg\")) %&gt;% \n  filter(f_raw &gt; 0) %&gt;%\n  contam_histogram(trans=TRUE, x = f_raw) +\n  labs(x = \"Frequency distribution of each species in the negative controls\", y = \"Sample count\") +\n  facet_wrap(~strainID)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Frequency distribution of all species in the negative controls\n\n\n\nI am not sure where the off-target species are coming from because we did not include any positive community controls here. However, they are all very low abundance and so I think they are just noise. Also it is worth noting that HAMBI_1972 and HAMBI_1977 are the same genus so if some of the read qualities are crappy it could easily be missassigned.\n\nShow/hide code\nfinaltable %&gt;% \n  filter(str_detect(community_type, \"^neg\")) %&gt;% \n  filter(str_detect(strainID, \"0403|1287|1896|1977\")) %&gt;% \n  filter(f_raw &gt; 0) %&gt;% \n  contam_histogram(trans=TRUE, x = f_raw) +\n  labs(x = \"Frequency distribution of each species in the negative controls\", y = \"Sample count\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Frequency distribution of only target species in the negative controls\n\n\n\n\n\nShow/hide code\nfinaltable %&gt;% \n  filter(str_detect(community_type, \"^neg\")) %&gt;% \n  filter(str_detect(strainID, \"0403|1287|1896|1977\"))\n\n\n\n  \n\n\n\nThis looks ok, but there are potentially some problems. Specifically, negative control replicates 2, 3, and 4 all have some contamination. neg_2_0 seems to be contaminated with HAMBI_1977, neg_3_0 with HAMBI_1287, and neg_4_0 with HAMBI_1977. However in the 5 remaining negative controls there is no contamination.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#positive-controls",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#positive-controls",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.2 Positive controls",
    "text": "5.2 Positive controls\nThe positive controls should each have three species. In all cases the species that shouldn’t be there is very rare\n\n\nShow/hide code\nfinaltable %&gt;% \n  filter(str_detect(community_type, \"^pos\")) %&gt;%\n  mutate(total_pos_controls = n_distinct(sample)) %&gt;% \n  group_by(sample) %&gt;% \n  mutate(f = round(f_raw*100, 1)) %&gt;%\n  mutate(supposed_2_b_there = if_else(is.na(evo_hist), \"no\", \"yes\")) %&gt;% \n  relocate(f, supposed_2_b_there) %&gt;% \n  distinct(f, supposed_2_b_there, sample, strainID, count_correct, n_species, community_type,) %&gt;% \n  filter(f &gt; 0)\n\n\n\n  \n\n\n\nThis is also good - we detect all 3 species that should be there in the positive controls on each plate.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#misassigned-reads",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#misassigned-reads",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.3 Misassigned reads",
    "text": "5.3 Misassigned reads\nThese libraries were only prepared with samples from Milla’s 4-species experiment with 403, 1287, 1896, and 1977 so any time species other than these show up is just an incorrect assignment by Rbec. Let’s check quickly how many of these there are…\n\n\nShow/hide code\nfinaltable %&gt;% \n  filter(!str_detect(strainID, \"0403|1287|1896|1977\")) %&gt;% \n  filter(count_correct &gt; 0) %&gt;% \n  arrange(desc(count_correct))\n\n\n\n  \n\n\n\nThere is one or two incorrectly assigned reads here and there but this is just noise. We can safely exclude all reads not mapping to one of the focal species.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#samples-with-few-total-reads",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#samples-with-few-total-reads",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.4 Samples with few total reads",
    "text": "5.4 Samples with few total reads\nSome of the experimental pairs had streptomycin concentrations higher than any of the species individually could tolerate. We would naively expect then that neither species would grow successfully in these samples and that the overall biomass would be very low, thus resulting in a low number of recovered reads from these samples.\nTo look into this. first let’s check which samples have very low OD600 in the endpoint samples.\n\n\nShow/hide code\nod &lt;- read_tsv(here::here(\"_data_raw\", \"communities\", \"optical_density\", \"20240606_pairs\", \"optical_density_formatted.tsv\"))\n\n\nWe’ll filter out samples with an OD of less than 0.1 and also samples with fewer than 1000 reads. It is generally good practice to exclude samples with low number of reads.\n\n\nShow/hide code\ndf &lt;- left_join(finaltable, od, \n                  by = join_by(community_id, n_species, transfers, strep_conc, replicate)) %&gt;% \n  filter(transfers == 8) %&gt;% \n  arrange(sample_tot_raw) %&gt;% \n  arrange(OD) %&gt;% \n  # filter only samples with OD &lt; 0.1 or &lt; 1000 total reads. 1000 read threshold \n  # was chose based on the first figure in this notebook\n  filter(OD &lt; 0.1 | sample_tot_raw &lt; 1000) %&gt;% \n  filter(count_correct &gt; 0)\n\nlowread_samps &lt;- df %&gt;% \n  filter(sample_tot_raw &lt; 3000 & community_type == \"experiment\") %&gt;% \n  distinct(sample) %&gt;% \n  pull(sample)\n  \ndf %&gt;% \n  distinct(sample, community_type, OD, sample_tot_raw)\n\n\n\n  \n\n\n\nThere are 10 experimental samples that have less than 1000 reads. 6 of those samples have low optical density which indicates nothing was growing there and that they should have low read number. 4 samples have normal optical density (~ 0.3) and these look to be samples that failed at the library preparation/sequencing step. Regardless, all these 10 samples will be excluded from the downstream analysis.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#filter-to-target-species",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#filter-to-target-species",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.5 Filter to target species",
    "text": "5.5 Filter to target species\nExclude positive and negative controls and also exclude species that are not in the focal 4\n\n\nShow/hide code\nfinaltable_exp_mstr &lt;- finaltable %&gt;% \n  filter(community_type %nin% c(\"empty\", \"neg_ctrl\", \"pos_ctrl\")) %&gt;% \n  # also exclude samples with low reads\n  filter(sample %nin% lowread_samps) %&gt;% \n  filter(strainID %in% c(\"HAMBI_0403\", \"HAMBI_1287\", \"HAMBI_1896\", \"HAMBI_1977\")) %&gt;% \n  group_by(sample) %&gt;% \n  mutate(f_raw_targetsp = count_correct/sum(count_correct),\n         sample_tot_targetsp = sum(count_correct)) %&gt;% \n  ungroup() %&gt;% \n  relocate(c(sample_tot_targetsp, f_raw_targetsp), .after = f_raw)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#masterplate-samples",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#masterplate-samples",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.6 Masterplate samples",
    "text": "5.6 Masterplate samples\nTo set up this experiment, Milla combined the species in the planned proportions on a masterplate. Because this process was time consuming, the masterplate was stored at -80C after construction until the experiment start day when it was taken from the freezer and used to inoculate the experiment. Because Milla knows exactly which strains were added to the master plate and the plates were not allowed to grow, any strains in these samples that are not supposed to be there should be due to Illumina index cross talk and not true contamination. We can get a sense for the average index crosstalk rate from these samples and then draw a threshold of when to exclude likely false positives and when a positive is likely due to contamination.\n\n5.6.1 Pairs\nOverall the masterplate pairs look very good. There are no samples where a species that should not be there is present in high abundances. Any contamination (grey to black fill) is well under 5%.\n\nShow/hide code\nfinaltable_exp_mstr %&gt;%\n  filter(str_detect(community_type, \"masterplate\") & n_species == 2) %&gt;% \n  contaminated_barplot(threshold = 0, quartet = FALSE, y=f_raw_targetsp) +\n  ggtitle(\"All Masterplate pairs\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: Species composition of all masterplate pairs. Any species that shouldn’t be there (&gt; 0%) is shown in grey to black.\n\n\n\nThere are no samples with more than 4% of a species that shouldn’t be there\n\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"masterplate\")) %&gt;% \n  filter(n_species == \"2\") %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw_targetsp &gt; 0.04 ) %&gt;% \n  distinct(sample)\n\n\n\n  \n\n\n\n\nShow/hide code\nfinaltable_exp_mstr %&gt;%\n  filter(str_detect(community_type, \"masterplate\") & n_species == 2) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw_targetsp &gt; 0) %&gt;% \n  contam_histogram(trans = TRUE, x = f_raw_targetsp) +\n  labs(x = \"Species frequency\", y = \"Sample count\") +\n  ggtitle(\"Frequency distribution of misassigned species in masterplate pairs\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Frequency distribution of each species in masterplate pair samples where it should not occur. The 1% mark (commonly accepted as an acceptable Illumina cross-talk standard) is demarcated with a dashed line.\n\n\n\n\n\n5.6.2 Trios\nTrio masterplates also look very good. There are some samples where a species that shouldn’t be there is &gt; 3%, but these are always &lt; 5% and there are no samples with major contamination. Importantly these all match the proportions that we used to start the experiment\n\nShow/hide code\nfinaltable_exp_mstr %&gt;%\n  filter(str_detect(community_type, \"masterplate\") & n_species == 3) %&gt;% \n  # this is a dumb hack so that I don't have to plot all bars on the same axis\n  # but I can wrap them using a meaningless facet\n  group_by(sample) %&gt;% \n  mutate(id = cur_group_id()) %&gt;% \n  ungroup() %&gt;% \n  mutate(facet = ntile(id, 4)) %&gt;% \n  contaminated_barplot(threshold = 0, quartet = FALSE, y=f_raw_targetsp) +\n  ggtitle(\"All Masterplate trios\") +\n  facet_wrap(~facet, scales=\"free_x\", nrow=4) +\n  theme(\n    strip.background = element_blank(),\n    strip.text.x = element_blank()\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: Species composition of all masterplate trios. Any species that shouldn’t be there (&gt; 0%) is shown in grey to black. The samples are split over four rows to aid in visualization - the specific subplots are meaningless.\n\n\n\n\nShow/hide code\nfinaltable_exp_mstr %&gt;%\n  filter(str_detect(community_type, \"masterplate\") & n_species == 3) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw_targetsp &gt; 0) %&gt;% \n  contam_histogram(trans = TRUE, x = f_raw_targetsp) +\n  labs(x = \"Species frequency\", y = \"Sample count\") +\n  ggtitle(\"Frequency distribution of misassigned species in masterplate trios\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Frequency distribution of each species in masterplate trio samples where it should not occur. The 1% mark (commonly accepted as an acceptable Illumina cross-talk standard) is demarcated with a dashed line.\n\n\n\nThere are no samples with more than 3% of a species that shouldn’t be there\n\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"masterplate\")) %&gt;% \n  filter(n_species == \"3\") %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw_targetsp &gt; 0.03 ) %&gt;% \n  distinct(sample)\n\n\n\n  \n\n\n\n\n\n5.6.3 Masterplate Summary\nGenerally, the cross talk frequency is really good. For 3/4 species it is 1% or less which is more or less what you can expect when you are multiplexing libraries on an Illumina platform. Values greater than 1% are potentially indicative of a different problem, so 1977 requires a bit more investigation.\n\n\nShow/hide code\nfinaltable_exp_mstr %&gt;%\n  filter(str_detect(community_type, \"masterplate\")) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw_targetsp &gt; 0.01 & strainID == \"HAMBI_1977\") %&gt;%\n  arrange(desc(f_raw_targetsp))\n\n\n\n  \n\n\n\nIt looks like all the “problematic” samples come from plates 7 and 8 in the library prep. Plate 8 only contains the masterplate samples from trios whereas plate 7 contains both masterplate and experimental samples. In Figure 2 it shows that HAMBI-1977 is very abundant in many of the samples so likely the “leaky” reads come disproportionately from HAMBI-1977 which is why its crosstalk threshold may be higher (Figure 1). Anyway, I don’t think this is a problem and that we can move forward with these samples. However, to define extinction/competitive exclusion we may need to use a higher threshold than 1% (e.g., 3% frequency) because over 3% we can reliably say that a species is present and it is not due to index cross talk.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#experimental-samples",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#experimental-samples",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.7 Experimental samples",
    "text": "5.7 Experimental samples\nWe may need to use a higher threshold than 1% (e.g., 3% frequency) because over 3% we can reliably say that a species is present and it is not due to index cross talk. Below I basically empirically chose 8% as a reasonable threshold value that includes the maximum number of samples with low-level contamination and exclude samples with very high contamination.\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\")) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw &gt; 0.03 ) %&gt;% \n  contam_histogram(trans=TRUE, x = f_raw_targetsp) +\n  labs(x = \"Species frequency\", y = \"Sample count\") +\n  ggtitle(\"Frequency distribution of each species exceeding the 3% threshold\") +\n  geom_vline(xintercept = 0.08, color = \"red\") +\n  facet_grid(n_species~strainID)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: Frequency distribution of each species in experimental samples where it should not occur and where it exceeds a 3% threshold. Grid columns are the different species and grid rows represent whether the sample was an experiment pair (2) or trio (3). The red vertical line is at 8%.\n\n\n\n\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\")) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw_targetsp &gt; 0.03 ) %&gt;% \n  arrange(desc(f_raw_targetsp))\n\n\n\n  \n\n\n\nThere are 73 samples (10% of 710 samples) that exceed a 3% crosstalk threshold. 23 samples (3% of 710 samples) have contamination &lt;= 8% and 50 samples (7 % of 710 samples) have &gt; 8% of a species that should not be there. In most cases the species in highly contaminated samples is HAMBI_1977. I think these 50 samples are probably at very high risk for legitimate contamination. It is likely that the rest of the 23 samples with &lt;= 8% contamination are not contaminated but just crosstalk outliers.\n\n5.7.1 Pairs\nHere taking a closer look at the pairs from the experiment that appear to be contaminated.\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\") & n_species == 2) %&gt;% \n  contaminated_barplot(threshold = 0.16,  quartet = FALSE, y=f_raw_targetsp) +\n  ggtitle(\"Experiment pairs with &gt;= 15% contamination\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 9: Species composition of pairs experimental samples that contain &gt;= 15% of a species that shouldn’t be there (shown in grey to black).\n\n\n\nMost of the comtaminated samples are in the 0 Streptomycin conditions. I think we should exclude samples where the contamination is very high (over ~50% of the sample) but those with 8% or less contaminant I think can be retained, and I will discard the contaminating sequences.\n\n\nShow/hide code\ncontampairs &lt;- finaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\") & n_species == 2) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw_targetsp &gt; 0.16 ) %&gt;% \n  pull(sample)\n\n\n\n\n5.7.2 Trios\nHere just taking a closer look at the trios from the experiment that appear to be contaminated.\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\") & n_species == 3) %&gt;% \n  contaminated_barplot(threshold=0.16,  quartet = FALSE, y=f_raw_targetsp) +\n  ggtitle(\"Experiment trios with &gt;= 15% contamination\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 10: Species composition of experiment trio samples that contain &gt;= 15% of a species that shouldn’t be there (shown in grey to black).\n\n\n\nAgain, I think we should exclude samples where the contamination is very high (over ~50% of the sample) but those with around less than 15% contaminant I think can be retained, and I will discard the contaminating sequences.\n\n\nShow/hide code\ncontamtrios &lt;- finaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\") & n_species == 3) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw_targetsp &gt; 0.16) %&gt;% \n  pull(sample)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#posneg-control-samples",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#posneg-control-samples",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "6.1 pos/neg control samples",
    "text": "6.1 pos/neg control samples\nSeparate out the pos/neg control samples\n\n\nShow/hide code\nfinaltable %&gt;% \n  filter(str_detect(community_type, \"^pos|^neg\")) %&gt;% \n  dplyr::select(-transfers, -strep_conc, -evo_hist, -target_f, -count) %&gt;% \n  mutate(batch = \"run20240711\") %&gt;% \n  write_tsv(here::here(data, \"pos_neg_ctrl_counts.tsv\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#pairs-2",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#pairs-2",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "6.2 Pairs",
    "text": "6.2 Pairs\nWrite the pair samples\n\n\nShow/hide code\nfinaltable_exp_mstr_export %&gt;% \n  filter(n_species == 2) %&gt;% \n  arrange(sample) %&gt;% \n  write_tsv(here::here(data, \"pairs_counts.tsv\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#trios-2",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/01_format_rbec_tab.html#trios-2",
    "title": "Formatting Rbec output from 2024-07-11 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "6.3 Trios",
    "text": "6.3 Trios\nWrite the trio samples\n\n\nShow/hide code\nfinaltable_exp_mstr_export %&gt;% \n  filter(n_species == 3) %&gt;% \n  arrange(sample) %&gt;% \n  write_tsv(here::here(data, \"trios_counts.tsv\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "i) Batch 2024-07-11"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/02_plot_analyze_growth.html",
    "href": "R/monocultures/bioscreen/02_plot_analyze_growth.html",
    "title": "Analyzing monoculture growth summary",
    "section": "",
    "text": "In the prior step we imported, smoothed, and calculated summary statistics for the species growth in monocultures. These monocultures include experiments either with 100% R2A and different levels of streptomycin or with no streptomycin and the pairwise filtrates from all other species.\nHere we will do some simple plots and analysis of the growth data. We will also look into the filtrate data.",
    "crumbs": [
      "1. Monoculture growth",
      "ii) Plot growth summaries"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/02_plot_analyze_growth.html#libraries",
    "href": "R/monocultures/bioscreen/02_plot_analyze_growth.html#libraries",
    "title": "Analyzing monoculture growth summary",
    "section": "2.1 Libraries",
    "text": "2.1 Libraries\n\n\nShow/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(scales)\nlibrary(ggraph)\nsource(here::here(\"R\", \"utils_generic.R\"))",
    "crumbs": [
      "1. Monoculture growth",
      "ii) Plot growth summaries"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/02_plot_analyze_growth.html#global-variables",
    "href": "R/monocultures/bioscreen/02_plot_analyze_growth.html#global-variables",
    "title": "Analyzing monoculture growth summary",
    "section": "2.2 Global variables",
    "text": "2.2 Global variables\n\n\nShow/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"monocultures\", \"20240328_bioscreen\")\ndata &lt;- here::here(\"data\", \"monocultures\", \"20240328_bioscreen\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "1. Monoculture growth",
      "ii) Plot growth summaries"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/02_plot_analyze_growth.html#read-growth-summary-data",
    "href": "R/monocultures/bioscreen/02_plot_analyze_growth.html#read-growth-summary-data",
    "title": "Analyzing monoculture growth summary",
    "section": "2.3 Read growth summary data",
    "text": "2.3 Read growth summary data\n\n\nShow/hide code\nmany_auc_res &lt;- readr::read_tsv(here::here(data, \"gcurve_auc_results.tsv\"))\nmany_spline_res &lt;- readr::read_tsv(here::here(data, \"gcurve_spline_results.tsv\"))\nmany_linear_res &lt;- readr::read_tsv(here::here(data, \"gcurve_linear_results.tsv\"))\nmany_baranyi_res &lt;- readr::read_tsv(here::here(data, \"gcurve_baranyi_results.tsv\"))\nmany_huang_res &lt;- readr::read_tsv(here::here(data, \"gcurve_huang_results.tsv\"))",
    "crumbs": [
      "1. Monoculture growth",
      "ii) Plot growth summaries"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/02_plot_analyze_growth.html#growth-rates",
    "href": "R/monocultures/bioscreen/02_plot_analyze_growth.html#growth-rates",
    "title": "Analyzing monoculture growth summary",
    "section": "5.1 Growth rates",
    "text": "5.1 Growth rates\n\n\nShow/hide code\ngr_strep &lt;- many_spline_res %&gt;% \n  filter(!str_detect(plate_name, \"pairwise\")) %&gt;% \n  mutate(hist = str_split_i(sp_hist, \"_\", 1),\n         sp = str_split_i(sp_hist, \"_\", 2)) %&gt;% \n  summarize(ggplot2::mean_cl_boot(mumax), .by=c(sp, hist, strep_conc)) %&gt;% \n  ggplot(aes(x = strep_conc, y = y)) +\n  geom_linerange(aes(ymin = ymin, ymax = ymax, color = hist)) +\n  geom_line(aes(color = hist), lty=2) +\n  geom_point(aes(color = hist)) +\n  labs(y = \"Maximum per capita growth rate μ (hr-1)\", x = \"Streptomycin conc. (μg/ml)\", \n       color = \"Evolutionary\\nhistory\") +\n  facet_grid(~sp) +\n  scale_x_continuous(trans=\"log1p\", breaks = c(0, 1, 10, 100, 1000, 5000))\n\nggsave(\n  here::here(\"figs\", \"monoculture_gr_strep.svg\"),\n  gr_strep,\n  width = 10,\n  height = 4,\n  units = \"in\",\n  device = \"svg\"\n)\n\nggsave(\n  here::here(\"figs\", \"monoculture_gr_strep.png\"),\n  gr_strep,\n  width = 10,\n  height = 4,\n  units = \"in\",\n  device = \"png\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Maximum specific growth rate (\\(\\mathrm{\\mu_{max}}\\) in \\(\\mathrm{hr^{-1}}\\)) for the four different bacterial species (panels) and their different evolutionary histories (colors) at different streptomycin concentrations (horizontal axis, μg/ml). Points are the mean over five biological replicates and line ranges show the 95% confidence interval from bootstraps. EVO = experimentally evolved to high streptomycin.",
    "crumbs": [
      "1. Monoculture growth",
      "ii) Plot growth summaries"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/02_plot_analyze_growth.html#auc-area-under-the-growth-curve",
    "href": "R/monocultures/bioscreen/02_plot_analyze_growth.html#auc-area-under-the-growth-curve",
    "title": "Analyzing monoculture growth summary",
    "section": "5.2 AUC (area under the growth curve)",
    "text": "5.2 AUC (area under the growth curve)\n\n\nShow/hide code\nauc_strep &lt;- many_auc_res %&gt;% \n  filter(!str_detect(plate_name, \"pairwise\")) %&gt;% \n  mutate(hist = str_split_i(sp_hist, \"_\", 1),\n         sp = str_split_i(sp_hist, \"_\", 2)) %&gt;% \n  summarize(ggplot2::mean_cl_boot(auc), .by=c(sp, hist, strep_conc)) %&gt;% \n  ggplot(aes(x = strep_conc, y = y)) +\n  geom_linerange(aes(ymin = ymin, ymax = ymax, color = hist)) +\n  geom_line(aes(color = hist), lty=2) +\n  geom_point(aes(color = hist)) +\n  labs(y = \"Total area under the growth curve\", x = \"Streptomycin conc. (μg/ml)\", \n       color = \"Evolutionary\\nhistory\") +\n  facet_grid(~sp) +\n  scale_x_continuous(trans=\"log1p\", breaks = c(0, 1, 10, 100, 1000, 5000))\n\nggsave(\n  here::here(\"figs\", \"monoculture_auc_strep.svg\"),\n  auc_strep,\n  width = 10,\n  height = 4,\n  units = \"in\",\n  device = \"svg\"\n)\n\nggsave(\n  here::here(\"figs\", \"monoculture_auc_strep.png\"),\n  auc_strep,\n  width = 10,\n  height = 4,\n  units = \"in\",\n  device = \"png\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Area under the growth curve for the four different bacterial species (panels) and their different evolutionary histories (colors) at different streptomycin concentrations (horizontal axis, μg/ml). Points are the mean over five biological replicates and line ranges show the 95% confidence interval from bootstraps. EVO = experimentally evolved to high streptomycin.",
    "crumbs": [
      "1. Monoculture growth",
      "ii) Plot growth summaries"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/02_plot_analyze_growth.html#growth-rate",
    "href": "R/monocultures/bioscreen/02_plot_analyze_growth.html#growth-rate",
    "title": "Analyzing monoculture growth summary",
    "section": "6.1 Growth rate",
    "text": "6.1 Growth rate\n\n\nShow/hide code\ngr_filtrate &lt;- many_spline_res %&gt;% \n  filter(str_detect(plate_name, \"pairwise\")) %&gt;% \n  summarize(m = mean(mumax), .by=c(sp_hist, sp_filtrate)) %&gt;% \n  mutate(sp_filtrate = factor(sp_filtrate, levels =c(\"ANC_0403\", \"EVO_0403\", \"ANC_1287\", \"EVO_1287\", \"ANC_1896\", \n                                              \"EVO_1896\", \"ANC_1977\", \"EVO_1977\")),\n         sp_hist = factor(sp_hist, levels = c(\"ANC_0403\", \"EVO_0403\", \"ANC_1287\", \"EVO_1287\", \"ANC_1896\", \n                                              \"EVO_1896\", \"ANC_1977\", \"EVO_1977\"))) %&gt;% \n  ggplot(aes(x = sp_filtrate, y = sp_hist)) +\n  geom_tile(aes(fill = m)) +\n  labs(y = \"Growth of species/evolutionary history\", x = \"Filtrate from species/evolutionary history\",\n       fill = \"μ (hr-1)\") +\n  scale_fill_viridis() +\n  coord_fixed() + \n  ggplot2::theme(panel.grid = element_blank(),\n                 panel.background = element_blank(), \n                 strip.background = element_blank(),\n                 panel.border = element_blank())\n\nggsave(\n  here::here(\"figs\", \"monoculture_gr_filtrate.svg\"),\n  gr_filtrate,\n  width = 8,\n  height = 8,\n  units = \"in\",\n  device = \"svg\"\n)\n\nggsave(\n  here::here(\"figs\", \"monoculture_gr_filtrate.png\"),\n  gr_filtrate,\n  width = 8,\n  height = 8,\n  units = \"in\",\n  device = \"png\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Mean growth rate (color) of each species/evolutionary history (vertical axis) on the filtrate of other species, including itself (horizontal axis).",
    "crumbs": [
      "1. Monoculture growth",
      "ii) Plot growth summaries"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/02_plot_analyze_growth.html#auc-area-under-the-growth-curve-1",
    "href": "R/monocultures/bioscreen/02_plot_analyze_growth.html#auc-area-under-the-growth-curve-1",
    "title": "Analyzing monoculture growth summary",
    "section": "6.2 AUC (area under the growth curve)",
    "text": "6.2 AUC (area under the growth curve)\n\n\nShow/hide code\nauc_filtrate &lt;- many_auc_res %&gt;% \n  filter(str_detect(plate_name, \"pairwise\")) %&gt;% \n  summarize(m = mean(auc), .by=c(sp_hist, sp_filtrate)) %&gt;% \n  mutate(sp_filtrate = factor(sp_filtrate, levels =c(\"ANC_0403\", \"EVO_0403\", \"ANC_1287\", \"EVO_1287\", \"ANC_1896\", \n                                              \"EVO_1896\", \"ANC_1977\", \"EVO_1977\")),\n         sp_hist = factor(sp_hist, levels = c(\"ANC_0403\", \"EVO_0403\", \"ANC_1287\", \"EVO_1287\", \"ANC_1896\", \n                                              \"EVO_1896\", \"ANC_1977\", \"EVO_1977\"))) %&gt;% \n  ggplot(aes(x = sp_filtrate, y = sp_hist)) +\n  geom_tile(aes(fill = m)) +\n  labs(y = \"Growth of species/evolutionary history\", x = \"Filtrate from species/evolutionary history\",\n       fill = \"μ (hr-1)\") +\n  scale_fill_viridis() +\n  coord_fixed() + \n  ggplot2::theme(panel.grid = element_blank(),\n                 panel.background = element_blank(), \n                 strip.background = element_blank(),\n                 panel.border = element_blank())\n\nggsave(\n  here::here(\"figs\", \"monoculture_auc_filtrate.svg\"),\n  auc_filtrate,\n  width = 7,\n  height = 7,\n  units = \"in\",\n  device = \"svg\"\n)\n\nggsave(\n  here::here(\"figs\", \"monoculture_auc_filtrate.png\"),\n  auc_filtrate,\n  width = 7,\n  height = 7,\n  units = \"in\",\n  device = \"png\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: Mean area under the growth curve (color) of each species/evolutionary history (vertical axis) on the filtrate of other species, including itself (horizontal axis).",
    "crumbs": [
      "1. Monoculture growth",
      "ii) Plot growth summaries"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data anlalysis for the project hambiEvoEnvCoexist",
    "section": "",
    "text": "TBD\n\n\n\nTBD"
  },
  {
    "objectID": "index.html#manuscript",
    "href": "index.html#manuscript",
    "title": "Data anlalysis for the project hambiEvoEnvCoexist",
    "section": "",
    "text": "TBD\n\n\n\nTBD"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Data anlalysis for the project hambiEvoEnvCoexist",
    "section": "2 Introduction",
    "text": "2 Introduction\nPast work has shown that the composition of small bacterial communities can be predicted remarkably well from outcomes of competitions between small sets of species (Friedman, Higgins, and Gore 2017). Other work has questioned whether such simple qualitative assembly rules hold in more complex situations such as when the species pool shares an evolutionary history (Chang et al. 2023) (also see this blog post). If community assembly dynamics can truly be characterized by additive pairwise processes this would be a great advantage for modelers. It would mean that communities could be described sufficiently using paired species interactions (as in traditional Lotka Volterra). However, if higher-order interactions (Levine et al. 2017) are common and important (e.g., species C mediates the interaction between species A and B in a density independent way) then the number of parameters necessary to sufficiently model the system quickly blows up quickly making the entire problem intractable.\nUnderstanding the fundamental processes in community assembly will be key to designing microbial communities with desirable properties for human use and to anticipate the response of communities in nature to change. Two theoretical camps have emerged in contemporary theory; one arguing for pairwise assembly rules and another arguing for the importance of networks of chained pairwise interactions and/or higher order interactions. Evidence exists for both processes occurring in nature. Thus, the question of when/how/why community assembly can be sufficiently described/predicted from additive pairwise processes is relevant and important for gaining a predictive understanding of microbiome dynamics. For example, when will the assembly process emerge as a property of the community, rather than being a straightforward additive process? In particular, do the previous evolutionary history and patterns of coexistence in the species pool determine emergent coexistence? What is the role for different growth conditions (substrate availability, antibacterial compounds, pH, predator presence)? Or does prior adaptive evolution to the environment change the outcomes? Do the “simple” rules governing community assembly fundamentally change as you add more layers of complexity?\nThe goal here is to shed some additional light on the question of the importance of pairwise competition/emergent coexistence in microbiomes. Our experiment assembles all possible 2, 3, and 4 species sub communities from a 4-species pool under a gradient of antibiotic concentrations and with different evolutionary histories of the four species. We assess the predictability of community assembly outcomes based on subsets of the reduced species assemblies and attempt to understand whether assembly operates in a predominantly pairwise way."
  },
  {
    "objectID": "index.html#experiment-overview",
    "href": "index.html#experiment-overview",
    "title": "Data anlalysis for the project hambiEvoEnvCoexist",
    "section": "3 Experiment overview",
    "text": "3 Experiment overview\n\n3.1 Background:\nIn prior work from our lab we experimentally evolved all species from the HAMBI synthetic community to increasing concentrations of the aminoglycoside antibiotic streptomycin. Briefly, we would grow each species at the highest streptomycin concentration it could tolerate for a number of growth cycles, then we would transfer into a higher streptomycin. We did this until we reached a streptomycin concentration where we could no longer detect growth. Then these cultures were plated and a single clone was isolated.\nThese clones are the source “evolved” starting materials for this experiment, where their clonal ancestor is the “ancestral” starting material.\n\n\n3.2 Traits and physiology of species:\nThe ancestral and evolved form of each species were grown for 48 hours at 30℃ in 100% R2A growth medium (Reasoner and Geldreich 1985) at concentrations of 0, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, and 4096 μg/ml streptomycin. Growth was followed using optical density at 600 nm in a Bioscreen plate reader. Growth rates and carrying capacities were determined from the high resolution growth curves using AMiGA.\n\n\n3.3 Species interactions:\nThe ancestral and evolved forms of each species were grown for 48 hours at 30℃ in 100% R2A growth medium (Reasoner and Geldreich 1985). Cultures were filtered to remove bacterial biomass and the spent media was stored at 4℃ until use. Next the evolved and ancestral forms of each species were grown in the spent medium of each other evo/anc species for 48 hours at 30℃ and growth was followed using optical density at 600 nm in a Bioscreen plate reader.\nFor the Burkholder diffusion assay each species/evolutionary form was added to a soft agar on a petri dish. Then a small volume of each species was pipetted directly onto the agar and plates and checked for zones of inhibition.\n\n\n3.4 Competition/coexistence outcomes (species proportions from communities):\nHere we wish to ensure that any equilibrium coexistence or competitive exclusion between species is not multistable - meaning that the outcome is deterministic and truly based on the density-independent competitive abilities of the species and not dependent on their starting density. The multistability problem has been addressed in other studies by growing each species from each community at different starting densities. This is typically done by starting all of the rare species at a low density and one abundant species at a higher density (as measured by optical density). For more than 2 species you cannot reasonably achieve all possible permutations of different densities, but you can start each species from rare, while leaving one remaining species high.\nHere we use starting conditions with 10%/90% for pairs, 80%/10%/10% for trios, and 70%/10%/10%/10% for quartets. For pairs, we alternated so that each species started from rare. For trios and quartets, we alternated so that each species was allowed to invade from rare but we did not use all possible staring proportions due to practical and cost limitations. Another important consideration is that we can not distinguish between the ancestral and evolved forms of the same species with amplicon sequencing (or with plate counts) so that our experimental arrangement cannot be fully factorial (e.g., we cannot compete ancestral 1977 against evolved 1977) and thus there are fewer combinations that one would expect from expected scaling of \\(2^{(8-1)} = 128\\)\nFor the coexistence/exclusion experiments experimental communities are inoculated in 500 μl of 100% R2A in deep 96 well plates at a 50 fold dilution at four different streptomycin levels: 0, 16, 64, and 256 μg/ml. Plates were incubated in the dark at 30℃ with shaking at 800 RPM. Serial transfers (50 fold dilution; 10 μl to 490 μl) were conducted every 48 hours for a total of eight growth cycles. For every growth cycle \\(\\mathrm{log_2(50)} \\approx 5.6\\) generations will have elapsed for a total of about 45 generations over eight cycles."
  },
  {
    "objectID": "index.html#measurements-and-data-types",
    "href": "index.html#measurements-and-data-types",
    "title": "Data anlalysis for the project hambiEvoEnvCoexist",
    "section": "4 Measurements and data types",
    "text": "4 Measurements and data types\n\n4.1 Traits and physiology of species:\n\nGrowth rates and carrying capacity (in optical density units) of each species (both ancestral/evolved) on a gradient of streptomycin concentrations\n\n\n\n4.2 Species interactions:\n\nGrowth rates and carrying capacity (in optical density units) of each species (both ancestral/evolved) on the filtrate of all other species.\nBurkholder Diffusion Assays for species pairs to detect presence of interference competition (e.g., antibiotic or toxin production that kills competitors). These results show that no species/evolutionary form produced zones of inhibition for any other species/form. This suggests that there will not be significant interference competition in this experiment.\n\n\n\n4.3 Competition/coexistence outcomes (species proportions from communities):\n\nCommunity DNA from pairs, trios, and quartets was sampled after eight 48 hour growth cycles\n16S rRNA amplicon sequencing was performed on samples to get the proportion of each species\nOptical density was collected at every other growth cycle"
  },
  {
    "objectID": "index.html#availability",
    "href": "index.html#availability",
    "title": "Data anlalysis for the project hambiEvoEnvCoexist",
    "section": "5 Availability",
    "text": "5 Availability\nData and code in this GitHub repository (https://github.com/slhogle/hambiEvoEnvCoexist) is provided under GNU AGPL3. The rendered project site is available at https://slhogle.github.io/hambiEvoEnvCoexist/, which has been produced using Quarto notebooks. The content on the rendered site is released under the CC BY 4.0. This repository hosts all code and data for this project including the code necessary to fully recreate the rendered webpage.\nAn archived release of the code here is available from Zenodo:\nRaw sequencing data using in the project is available from NCBI Bioproject ."
  },
  {
    "objectID": "index.html#reproducibility",
    "href": "index.html#reproducibility",
    "title": "Data anlalysis for the project hambiEvoEnvCoexist",
    "section": "6 Reproducibility",
    "text": "6 Reproducibility\nThe project uses renv to create reproducible environment to execute the code in this project. See here for a brief overview on collaboration and reproduction of the entire project. To get up and running you can do:\ninstall.packages(\"renv\")\nrenv::restore()"
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html",
    "title": "Formatting bioscreen growth curves",
    "section": "",
    "text": "Before the main experiment we grew each ancestral and evolved form of each species in 100% R2A media at a range of streptomycin concentrations. We measured the optical density of the cultures in a high-throughput platereader (Bioscreen) over 48 hours. From this data we can estimate the growth rate and the carrying capacity of each species in the different streptomycin concentrations.\nWe also grew all the ancestral and evolved forms of each species for 48 hours in 100% R2A media. We filtered the spent media of each species and evolved form, collected the filtrate, and grew each species/evo form in the filtrate of every other species. Again, we measured the optical density of the cultures grown on these filtrates in a high-throughput platereader (Bioscreen) over 48 hours.\nIn this notebook we will read the output from the bioscreen plate reader and format it for later plotting and analysis.",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#libraries",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#libraries",
    "title": "Formatting bioscreen growth curves",
    "section": "2.1 Libraries",
    "text": "2.1 Libraries\n\n\nShow/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(fs)\nlibrary(ggforce)\nlibrary(slider)\nsource(here::here(\"R\", \"utils_generic.R\"))",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#global-variables",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#global-variables",
    "title": "Formatting bioscreen growth curves",
    "section": "2.2 Global variables",
    "text": "2.2 Global variables\n\n\nShow/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"monocultures\", \"20240328_bioscreen\")\ndata &lt;- here::here(\"data\", \"monocultures\", \"20240328_bioscreen\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#functions",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#functions",
    "title": "Formatting bioscreen growth curves",
    "section": "2.3 Functions",
    "text": "2.3 Functions\nFor plotting results\n\n\nShow/hide code\nplotplate &lt;- function(df, dfxy, unsmoothed=TRUE, predicted=FALSE, plate, rows, cols, page){\n  dffilt &lt;- dplyr::filter(df, plate_name == {{ plate }})\n  xyfilt &lt;- if (!is.null(dfxy)){ left_join(dfxy, distinct(dffilt, id, bioscreen_well, plate_name), by = join_by(id)) %&gt;% \n      drop_na()}\n  \n  ggplot(dffilt, aes(x = hours)) +\n    list(\n      ggplot2::geom_line(aes(y=OD600_rollmean), color = \"blue\"), \n      if (unsmoothed) {ggplot2::geom_line(aes(y=OD600), color = \"orange\", lty = 2)},\n      if (predicted) {ggplot2::geom_line(aes(y=predicted), color = \"orange\")}, \n      if (!is.null(dfxy)) {ggplot2::geom_point(data = xyfilt, aes(x = x, y = y), color = \"red\", size = 2)},\n      ggplot2::labs(x = \"Hours\", y = \"OD600\"), \n      ggplot2::scale_x_continuous(breaks = seq(0, 48, 12), labels = seq(0, 48, 12)), \n      ggforce::facet_wrap_paginate(~ bioscreen_well, nrow = rows, ncol = cols, page = page, scales = \"free_y\"), \n      ggplot2::theme(axis.text = element_text(size = 5))\n    )\n}",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#deal-with-encoding-issues",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#deal-with-encoding-issues",
    "title": "Formatting bioscreen growth curves",
    "section": "3.1 Deal with encoding issues",
    "text": "3.1 Deal with encoding issues\nFirst we need to know what encoding the file has\n\n\nShow/hide code\nreadr::guess_encoding(\n  here::here(data_raw,\n    \"bioscreen_strep_01.txt\"\n  )\n)\n\n\n\n  \n\n\n\nBioscreen files are in UTF-16E.\n\n3.1.1 List files\n\n\nShow/hide code\nfiles &lt;- fs::dir_ls(\n  path = data_raw,\n  all = FALSE,\n  recurse = TRUE,\n  type = \"file\",\n  glob = \"*.txt\",\n  regexp = NULL,\n  invert = FALSE,\n  fail = TRUE\n)\n\nfiles_named &lt;- rlang::set_names(files, nm = purrr::map_chr(files, fs::path_file) %&gt;% str_remove(\".txt\"))\n\n\n\n\n3.1.2 Read file using base R\nMust use read.delim as it is the only tool that I could find that handled the UTF-16LE correctly\n\n\nShow/hide code\nraw_df &lt;- purrr::map(\n  files_named,\n  read.delim,\n  # this is the encoding we deduced above\n  fileEncoding = \"UTF-16LE\",\n  skipNul = TRUE,\n  # telling it there is no header for colulmn names\n  header = FALSE,\n  sep = \" \",\n  colClasses = \"character\",\n  strip.white = TRUE,\n  na.strings = \"\",\n  # skip the first 3 lines because\n  skip = 3,\n  quote = \"\",\n  allowEscapes = FALSE,\n  comment.char = \"\",\n) %&gt;% purrr::list_rbind(names_to = \"plate_name\")\n\n\n\n\n3.1.3 Fix locale issues\n\n\nShow/hide code\nraw_df_decimal &lt;- readr::type_convert(\n  raw_df,\n  locale = readr::locale(decimal_mark = \",\", grouping_mark = \".\"),\n  cols(\n    .default = col_double(),\n    plate_name = col_character(),\n    V1 = col_time(format = \"\"),\n    V203 = col_logical()\n  )\n) %&gt;%\n  tibble::as_tibble()\n\n\n\n\n3.1.4 Fix weird time encoding\nThe V1 variable has time encoded as Hr:Min:Sec which we want to convert to just seconds\nThe rounding step is necessary because the bioscreen actually doesn’t output consistent intervals. Sometimes it is 00:30:06 and other times it is 00:30:05. This becomes a problem later on when trying to combine multiple runs at once\n\n\nShow/hide code\nround_any &lt;- function(x, accuracy, f=round){\n  f(x/ accuracy) * accuracy\n}\n\nraw_df_decimal_sec &lt;- dplyr::mutate(raw_df_decimal, \n                                    V1 = round_any(lubridate::period_to_seconds(lubridate::hms(V1)), 100)\n                                    )\n\n\n\n\n3.1.5 Remove extraneous columns.\nSome of the columns have no useful data whatsoever. We need to get rid of those.\n\n\nShow/hide code\ndplyr::select(raw_df_decimal_sec, tidyselect::last_col(offset = 1), tidyselect::last_col())\n\n\n\n  \n\n\n\n\n\nShow/hide code\ndplyr::select(raw_df_decimal_sec, tidyselect::num_range(\"V\", 1:4))\n\n\n\n  \n\n\n\nThe last columns is V203 and has nothing. Column V2 is just blank. Now we’ll just keep the columns we need.\n\n\nShow/hide code\ngcurves_slurped_fmt &lt;- raw_df_decimal_sec %&gt;% \n  dplyr::select(plate_name, V1, V3:V202) %&gt;% \n  dplyr::mutate(hours = lubridate::time_length(V1, unit = \"hours\")) %&gt;%\n  tidyr::pivot_longer(c(-plate_name, -hours, -V1), names_to = \"well\", values_to = \"OD600\") %&gt;%\n  # here we remove the V part and subtract 2 so that bioscreen well numbers will go from 1:100 per plate\n  dplyr::mutate(bioscreen_well = as.numeric(str_remove(well, \"V\"))-2) %&gt;% \n  dplyr::rename(seconds = V1)",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#read-metadata",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#read-metadata",
    "title": "Formatting bioscreen growth curves",
    "section": "4.1 Read metadata",
    "text": "4.1 Read metadata\nStreptomycin and filtrate conditions\n\n\nShow/hide code\ngcurves_slurped_fmt_md &lt;- readr::read_tsv(\n  here::here(data_raw, \"plate_conditions.tsv\"),\n  col_names = TRUE,\n  cols(\n    plate_name = col_character(),\n    plate_number = col_double(),\n    bioscreen_well = col_double(),\n    replicate = col_double(),\n    sp_hist = col_character(),\n    strep_conc = col_double(),\n    sp_filtrate = col_character()\n  )\n)",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#join-with-metadata-to-remove-ununsed-samples",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#join-with-metadata-to-remove-ununsed-samples",
    "title": "Formatting bioscreen growth curves",
    "section": "4.2 Join with metadata to remove ununsed samples",
    "text": "4.2 Join with metadata to remove ununsed samples\n\n\nShow/hide code\ngcurves &lt;- dplyr::left_join(\n  gcurves_slurped_fmt_md,\n  gcurves_slurped_fmt,\n  by = dplyr::join_by(plate_name, bioscreen_well)\n)\n\n\nOne thing I’ve realized is that many methods for inferring growth rates struggle when the density of observations is too high (e.g., one measurement every 5 minutes). In reality I’ve found that taking one measurement every 15 minutes is sufficient. Here we thin it out so that measurements are in 20 minute intervals. This seems to improve the fitting procedure a lot without much of a cost.\n\n\nShow/hide code\ngcurves_thin &lt;- gcurves %&gt;% \n  # 1200 is 20 minutes so by ensuring modulo = 0 we include only time points\n  # 0, 20, 40, 60 minutes and so on...\n  dplyr::filter(seconds %% 1200 == 0)\n\n\nNow we’ll do some smoothing to reduce the “jaggedness” of the curves a bit. We use the slider package with a 5 point rolling mean for each focal observation we take the mean including the focal point and two points before and after.\n\n\nShow/hide code\ngcurves_thin_sm &lt;- gcurves_thin %&gt;% \n  dplyr::group_by(plate_name, bioscreen_well) %&gt;% \n  dplyr::mutate(OD600_rollmean = slider::slide_dbl(OD600, mean, .before = 2, .after = 2)) %&gt;% \n  ungroup()\n\nreadr::write_tsv(gcurves_thin_sm, here::here(data, \"gcurves_formatted_thinned.tsv\"))",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#bioscreen_strep_01",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#bioscreen_strep_01",
    "title": "Formatting bioscreen growth curves",
    "section": "5.1 bioscreen_strep_01",
    "text": "5.1 bioscreen_strep_01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Bioscreen plate “bioscreen_strep_01” wells 1-100. Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Bioscreen plate “bioscreen_strep_01” wells 101-200. Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#bioscreen_strep_02",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#bioscreen_strep_02",
    "title": "Formatting bioscreen growth curves",
    "section": "5.2 bioscreen_strep_02",
    "text": "5.2 bioscreen_strep_02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Bioscreen plate “bioscreen_strep_02” wells 1-70. Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: Bioscreen plate “bioscreen_strep_02” wells 71-140. Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#bioscreen_strep_03",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#bioscreen_strep_03",
    "title": "Formatting bioscreen growth curves",
    "section": "5.3 bioscreen_strep_03",
    "text": "5.3 bioscreen_strep_03\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Bioscreen plate “bioscreen_strep_03” wells 1-70 Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: Bioscreen plate “bioscreen_strep_03” wells 71-140. Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#bioscreen_pairwise_filtrates_01",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#bioscreen_pairwise_filtrates_01",
    "title": "Formatting bioscreen growth curves",
    "section": "5.4 bioscreen_pairwise_filtrates_01",
    "text": "5.4 bioscreen_pairwise_filtrates_01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Bioscreen plate “bioscreen_pairwise_filtrates_01” wells 1-80 Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: Bioscreen plate “bioscreen_pairwise_filtrates_01” wells 81-160 Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#bioscreen_pairwise_filtrates_02",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#bioscreen_pairwise_filtrates_02",
    "title": "Formatting bioscreen growth curves",
    "section": "5.5 bioscreen_pairwise_filtrates_02",
    "text": "5.5 bioscreen_pairwise_filtrates_02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 9: Bioscreen plate “bioscreen_pairwise_filtrates_02” wells 1-80. Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 10: Bioscreen plate “bioscreen_pairwise_filtrates_02” wells 81-160. Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#conclusions",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#conclusions",
    "title": "Formatting bioscreen growth curves",
    "section": "5.6 Conclusions",
    "text": "5.6 Conclusions\nGrowth curves all look reasonable. Can proceed with the analysis.",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#spline-based-estiamte",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#spline-based-estiamte",
    "title": "Formatting bioscreen growth curves",
    "section": "6.1 Spline based estiamte",
    "text": "6.1 Spline based estiamte\nSmoothing splines are a quick method to estimate maximum growth. The method is called nonparametric, because the growth rate is directly estimated from the smoothed data without being restricted to a specific model formula.\nFrom growthrates documentation:\n\nThe method was inspired by an algorithm of Kahm et al. (2010), with different settings and assumptions. In the moment, spline fitting is always done with log-transformed data, assuming exponential growth at the time point of the maximum of the first derivative of the spline fit. All the hard work is done by function smooth.spline from package stats, that is highly user configurable. Normally, smoothness is automatically determined via cross-validation. This works well in many cases, whereas manual adjustment is required otherwise, e.g. by setting spar to a fixed value [0, 1] that also disables cross-validation.\n\n\n6.1.1 Fit\n\n\nShow/hide code\nset.seed(45278)\nmany_spline &lt;- growthrates::all_splines(OD600_rollmean ~ hours | id, data = gcurves_thin_sm, spar = 0.5)\n\nreadr::write_rds(many_spline, here::here(data, \"spline_fits\"))\n\n\n\n\n6.1.2 Results\n\n\nShow/hide code\nmany_spline_res &lt;- growthrates::results(many_spline)\n\n\n\n\n6.1.3 Predictions\n\n\nShow/hide code\nmany_spline_xy &lt;- purrr::map(many_spline@fits, \\(x) data.frame(x = x@xy[1], y = x@xy[2])) %&gt;% \n  purrr::list_rbind(names_to = \"id\") %&gt;% \n  dplyr::mutate(id = stringr::str_remove_all(id, \"bioscreen_pairwise_|bioscreen_\"))\n\nmany_spline_fitted &lt;- purrr::map(many_spline@fits, \\(x) data.frame(x@FUN(x@obs$time, x@par))) %&gt;% \n  purrr::list_rbind(names_to = \"id\") %&gt;% \n  dplyr::rename(hours = time, predicted = y) %&gt;% \n  dplyr::left_join(gcurves_thin_sm, by = dplyr::join_by(id, hours)) %&gt;% \n  dplyr::mutate(id = stringr::str_remove_all(id, \"bioscreen_pairwise_|bioscreen_\")) %&gt;%\n  dplyr::group_by(id) %&gt;% \n  # this step makes sure we don't plot fits that go outside the range of the data\n  dplyr::mutate(predicted = dplyr::if_else(dplyr::between(predicted, min(OD600_rollmean), max(OD600_rollmean)), predicted, NA_real_)) %&gt;% \n  dplyr::ungroup()\n\n\n\n\n6.1.4 Plot\n\n6.1.4.1 bioscreen_strep_01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 11: Bioscreen plate “bioscreen_strep_01” wells 1-100. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 12: Bioscreen plate “bioscreen_strep_01” wells 101-200. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n6.1.4.2 bioscreen_strep_02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 13: Bioscreen plate “bioscreen_strep_02” wells 1-70. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 14: Bioscreen plate “bioscreen_strep_02” wells 71-140. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n6.1.4.3 bioscreen_strep_03\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 15: Bioscreen plate “bioscreen_strep_03” wells 1-70. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 16: Bioscreen plate “bioscreen_strep_03” wells 71-140. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n6.1.4.4 bioscreen_pairwise_filtrates_01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 17: Bioscreen plate “bioscreen_pairwise_filtrates_01” wells 1-80. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 18: Bioscreen plate “bioscreen_pairwise_filtrates_01” wells 81-160. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n6.1.4.5 bioscreen_pairwise_filtrates_02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 19: Bioscreen plate “bioscreen_pairwise_filtrates_02” wells 1-80. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 20: Bioscreen plate “bioscreen_pairwise_filtrates_02” wells 81-160. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate. Red dot is hours and OD600 at which maximum growth rate is reached.",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#linear-model-based-estimate",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#linear-model-based-estimate",
    "title": "Formatting bioscreen growth curves",
    "section": "6.2 Linear model based estimate",
    "text": "6.2 Linear model based estimate\nThis method determine maximum growth rates from the log-linear part of a growth curve using a heuristic approach similar to the “growth rates made easy” method of Hall et al. (2013).\nFrom growthrates documentation:\n\nThe algorithm works as follows:\n1. Fit linear regressions to all subsets of h consecutive data points. If for example h = 5, fit a linear regression to points 1 . . . 5, 2 . . . 6, 3. . . 7 and so on. The method seeks the highest rate of exponential growth, so the dependent variable is of course log-transformed.\n2. Find the subset with the highest slope bmax and include also the data points of adjacent subsets that have a slope of at least quota · bmax, e.g. all data sets that have at least 95% of the maximum slope.\n3. Fit a new linear model to the extended data window identified in step 2.\n\n\n6.2.1 Fit\n\n\nShow/hide code\nset.seed(45278)\nmany_linear &lt;- growthrates::all_easylinear(OD600_rollmean ~ hours | id, data = gcurves_thin_sm)\n\nreadr::write_rds(many_linear, here::here(data, \"linear_fits\"))\n\n\n\n\n6.2.2 Results\n\n\nShow/hide code\nmany_linear_res &lt;- growthrates::results(many_linear)\n\n\n\n\n6.2.3 Predictions\n\n\nShow/hide code\nmany_linear_fitted &lt;- purrr::map(many_spline@fits, \\(x) data.frame(x@FUN(x@obs$time, x@par))) %&gt;% \n  purrr::list_rbind(names_to = \"id\") %&gt;% \n  dplyr::rename(hours = time, predicted = y) %&gt;% \n  dplyr::left_join(gcurves_thin_sm, by = dplyr::join_by(id, hours)) %&gt;% \n  dplyr::mutate(id = stringr::str_remove_all(id, \"bioscreen_pairwise_|bioscreen_\")) %&gt;%\n  dplyr::group_by(id) %&gt;% \n  # this step makes sure we don't plot fits that go outside the range of the data\n  dplyr::mutate(predicted = dplyr::if_else(dplyr::between(predicted, min(OD600_rollmean), max(OD600_rollmean)), predicted, NA_real_)) %&gt;% \n  dplyr::ungroup()\n\n\n\n\n6.2.4 Plot\n\n6.2.4.1 bioscreen_strep_01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 21: Bioscreen plate “bioscreen_strep_01” wells 1-100. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from a piecewise linear model fit.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 22: Bioscreen plate “bioscreen_strep_01” wells 101-200. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from a piecewise linear model fit.\n\n\n\n\n\n6.2.4.2 bioscreen_strep_02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 23: Bioscreen plate “bioscreen_strep_02” wells 1-70. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from a piecewise linear model fit.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 24: Bioscreen plate “bioscreen_strep_02” wells 71-140. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from a piecewise linear model fit.\n\n\n\n\n\n6.2.4.3 bioscreen_strep_03\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 25: Bioscreen plate “bioscreen_strep_03” wells 1-70. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from a piecewise linear model fit.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 26: Bioscreen plate “bioscreen_strep_03” wells 71-140. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from a piecewise linear model fit.\n\n\n\n\n\n6.2.4.4 bioscreen_pairwise_filtrates_01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 27: Bioscreen plate “bioscreen_pairwise_filtrates_01” wells 1-80. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from a piecewise linear model fit.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 28: Bioscreen plate “bioscreen_pairwise_filtrates_01” wells 81-160. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from a piecewise linear model fit.\n\n\n\n\n\n6.2.4.5 bioscreen_pairwise_filtrates_02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 29: Bioscreen plate “bioscreen_pairwise_filtrates_02” wells 1-80. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from a piecewise linear model fit.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 30: Bioscreen plate “bioscreen_pairwise_filtrates_02” wells 81-160. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from a piecewise linear model fit.",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#baranyi-parametric-fit-estimate",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#baranyi-parametric-fit-estimate",
    "title": "Formatting bioscreen growth curves",
    "section": "6.3 Baranyi parametric fit estimate",
    "text": "6.3 Baranyi parametric fit estimate\nThis uses the growth model of Baranyi and Roberts (1995) written as analytical solution of the system of differential equations.\nFrom growthrates documentation:\n\nThe version of the equation used in this package has the following form:\n\\(A = time + \\frac{1}{mumax} \\times \\log((−\\mu_{max} \\times time) +exp(−h_{0})−exp(−\\mu_{max} \\times time−h0))\\)\n\\(\\log(y) = \\log(y_{0}) + \\mu_{max} \\times A − log(1 + \\frac{\\exp(\\mu_{max} \\times A) − 1}{\\exp(\\log(K) − \\log(y_{0})})\\)\n\n\n6.3.1 Fit\n\n\nShow/hide code\nset.seed(783622)\n\n# starting values and limits for the baranyi model\np   &lt;- c(y0 = 0.03, mumax = .1, K = 0.1, h0 = 1)\nlower   &lt;- c(y0 = 0.001, mumax = 1e-2, K = 0.005, h0 = 0)\nupper   &lt;- c(y0 = 0.1,   mumax = 1,    K = 0.9,   h0 = 10)\n\nmany_baranyi &lt;- growthrates::all_growthmodels(\n                   OD600_rollmean ~ growthrates::grow_baranyi(hours, parms) | id,\n                   data = gcurves_thin_sm,\n                   p = p, lower = lower, upper = upper,\n                   transform = \"log\", ncores = 8)\n\nreadr::write_rds(many_baranyi, here::here(data, \"barayani_fits\"))\n\n\n\n\n6.3.2 Results\n\n\nShow/hide code\nmany_baranyi_res &lt;- growthrates::results(many_baranyi)\n\n\n\n\n6.3.3 Predictions\n\n\nShow/hide code\nmany_baranyi_fitted &lt;- purrr::map(many_baranyi@fits, \\(x) data.frame(x@FUN(x@obs$time, x@par))) %&gt;% \n  purrr::list_rbind(names_to = \"id\") %&gt;% \n  dplyr::rename(hours = time, predicted = y) %&gt;% \n  dplyr::left_join(gcurves_thin_sm, by = dplyr::join_by(id, hours)) %&gt;% \n  dplyr::mutate(id = stringr::str_remove_all(id, \"bioscreen_pairwise_|bioscreen_\"))\n\n\n\n\n6.3.4 Plot\n\n6.3.4.1 bioscreen_strep_01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 31: Bioscreen plate “bioscreen_strep_01” wells 1-100. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Baranyi 1995 model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 32: Bioscreen plate “bioscreen_strep_01” wells 101-200. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Baranyi 1995 model.\n\n\n\n\n\n6.3.4.2 bioscreen_strep_02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 33: Bioscreen plate “bioscreen_strep_02” wells 1-70. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Baranyi 1995 model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 34: Bioscreen plate “bioscreen_strep_02” wells 71-140. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Baranyi 1995 model.\n\n\n\n\n\n6.3.4.3 bioscreen_strep_03\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 35: Bioscreen plate “bioscreen_strep_03” wells 1-70. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Baranyi 1995 model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 36: Bioscreen plate “bioscreen_strep_03” wells 71-140. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Baranyi 1995 model.\n\n\n\n\n\n6.3.4.4 bioscreen_pairwise_filtrates_01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 37: Bioscreen plate “bioscreen_pairwise_filtrates_01” wells 1-80. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Baranyi 1995 model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 38: Bioscreen plate “bioscreen_pairwise_filtrates_01” wells 81-160. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Baranyi 1995 model.\n\n\n\n\n\n6.3.4.5 bioscreen_pairwise_filtrates_02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 39: Bioscreen plate “bioscreen_pairwise_filtrates_02” wells 1-80. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Baranyi 1995 model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 40: Bioscreen plate “bioscreen_pairwise_filtrates_02” wells 81-160. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Baranyi 1995 model.",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#huang-parametric-fit-estimate",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#huang-parametric-fit-estimate",
    "title": "Formatting bioscreen growth curves",
    "section": "6.4 Huang parametric fit estimate",
    "text": "6.4 Huang parametric fit estimate\nHuangs growth model (ref 1, ref 2) written as analytical solution of the differential equations.\nFrom growthrates documentation:\n\nThe version of the equation used in this package has the following form:\n\\(B = time + \\frac{1}{alpha} \\times \\log(\\frac{1 + exp(−\\alpha \\times (time - \\lambda))}{1 + exp(\\alpha \\times \\lambda})\\)\n\\(\\log(y) = \\log(y_{0}) + \\log(K) − \\log(y_{0} + (K − y_{0}) \\times exp(−\\mu_{max} \\times B))\\)\nIn contrast to the original publication, all parameters related to population abundance (y, y0, K) are given as untransformed values. They are not log-transformed. In general, using log-transformed parameters would indeed be a good idea to avoid the need of constained optimization, but tests showed that box-constrained optimization worked resonably well. Therefore, handling of optionally log-transformed parameters was removed from the package to avoid confusion. If you want to discuss this, please let me know.\n\n\n6.4.1 Fit\n\n\nShow/hide code\nset.seed(123784)\n\n# starting values and limits for the huang model\np   &lt;- c(y0 = 0.03, mumax = .1, K = 0.1, alpha = 1.5, lambda = 3)\nlower   &lt;- c(y0 = 0.001, mumax = 1e-2, K = 0.005, alpha = 0.1, lambda = 0.03)\nupper   &lt;- c(y0 = 0.1,   mumax = 1,    K = 0.9,   alpha = 15, lambda = 15)\n\nmany_huang &lt;- growthrates::all_growthmodels(\n                   OD600_rollmean ~ growthrates::grow_huang(hours, parms) | id,\n                   data = gcurves_thin_sm,\n                   p = p, lower = lower, upper = upper,\n                   transform = \"log\", ncores = 8)\n\nreadr::write_rds(many_huang, here::here(data, \"huang_fits\"))\n\n\n\n\n6.4.2 Results\n\n\nShow/hide code\nmany_huang_res &lt;- growthrates::results(many_huang)\n\n\n\n\n6.4.3 Predictions\n\n\nShow/hide code\nmany_huang_fitted &lt;- purrr::map(many_huang@fits, \\(x) data.frame(x@FUN(x@obs$time, x@par))) %&gt;% \n  purrr::list_rbind(names_to = \"id\") %&gt;% \n  dplyr::rename(hours = time, predicted = y) %&gt;% \n  dplyr::left_join(gcurves_thin_sm, by = dplyr::join_by(id, hours)) %&gt;% \n  dplyr::mutate(id = stringr::str_remove_all(id, \"bioscreen_pairwise_|bioscreen_\"))\n\n\n\n\n6.4.4 Plot\n\n6.4.4.1 bioscreen_strep_01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 41: Bioscreen plate “bioscreen_strep_01” wells 1-100. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Huang model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 42: Bioscreen plate “bioscreen_strep_01” wells 101-200. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Huang model.\n\n\n\n\n\n6.4.4.2 bioscreen_strep_02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 43: Bioscreen plate “bioscreen_strep_02” wells 1-70. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Huang model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 44: Bioscreen plate “bioscreen_strep_02” wells 71-140. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Huangv model.\n\n\n\n\n\n6.4.4.3 bioscreen_strep_03\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 45: Bioscreen plate “bioscreen_strep_03” wells 1-70. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Huang model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 46: Bioscreen plate “bioscreen_strep_03” wells 71-140. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Huang model.\n\n\n\n\n\n6.4.4.4 bioscreen_pairwise_filtrates_01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 47: Bioscreen plate “bioscreen_pairwise_filtrates_01” wells 1-80. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Huang model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 48: Bioscreen plate “bioscreen_pairwise_filtrates_01” wells 81-160. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Huang model.\n\n\n\n\n\n6.4.4.5 bioscreen_pairwise_filtrates_02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 49: Bioscreen plate “bioscreen_pairwise_filtrates_02” wells 1-80. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Huang model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 50: Bioscreen plate “bioscreen_pairwise_filtrates_02” wells 81-160. Blue line is smoothed with a moving average window of 5 points. Orange is fitted to the Huang model.",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#auc",
    "href": "R/monocultures/bioscreen/01_format_growthcurves_batch.html#auc",
    "title": "Formatting bioscreen growth curves",
    "section": "6.5 AUC",
    "text": "6.5 AUC\nCalculates AUC using DescTools package\n\n\nShow/hide code\nmany_auc_res &lt;- gcurves_thin_sm %&gt;% \n  dplyr::summarize(auc = DescTools::AUC(hours, OD600_rollmean),\n            max_od = max(OD600_rollmean),\n            min_od = min(OD600_rollmean),\n            .by = id) %&gt;% \n  dplyr::left_join(dplyr::distinct(dplyr::select(gcurves_thin_sm, id, plate_name:sp_filtrate))) %&gt;% \n  dplyr::select(-id) %&gt;% \n  dplyr::relocate(auc, max_od, min_od, .after=\"sp_filtrate\")\n\n\nJoining with `by = join_by(id)`",
    "crumbs": [
      "1. Monoculture growth",
      "i) Inspect and format growth curves"
    ]
  },
  {
    "objectID": "R/communities/amplicon/04_analysis_quartets.html",
    "href": "R/communities/amplicon/04_analysis_quartets.html",
    "title": "Analysis of quartet competition",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(scales)\nlibrary(patchwork)\nlibrary(broom)\nlibrary(ggraph)\nlibrary(ggh4x)\nlibrary(tidygraph)\nsource(here::here(\"R\", \"utils_generic.R\"))\n\n\n\n\n\n\n\nShow/hide code\ndata &lt;- here::here(\"data\", \"communities\")\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "iii) Species quartets"
    ]
  },
  {
    "objectID": "R/communities/amplicon/04_analysis_quartets.html#libraries",
    "href": "R/communities/amplicon/04_analysis_quartets.html#libraries",
    "title": "Analysis of quartet competition",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(scales)\nlibrary(patchwork)\nlibrary(broom)\nlibrary(ggraph)\nlibrary(ggh4x)\nlibrary(tidygraph)\nsource(here::here(\"R\", \"utils_generic.R\"))",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "iii) Species quartets"
    ]
  },
  {
    "objectID": "R/communities/amplicon/04_analysis_quartets.html#global-variables",
    "href": "R/communities/amplicon/04_analysis_quartets.html#global-variables",
    "title": "Analysis of quartet competition",
    "section": "",
    "text": "Show/hide code\ndata &lt;- here::here(\"data\", \"communities\")\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "iii) Species quartets"
    ]
  },
  {
    "objectID": "R/communities/amplicon/04_analysis_quartets.html#species-abundances",
    "href": "R/communities/amplicon/04_analysis_quartets.html#species-abundances",
    "title": "Analysis of quartet competition",
    "section": "2.1 Species abundances",
    "text": "2.1 Species abundances\n\n\nShow/hide code\nsamp_quarts &lt;- readr::read_tsv(here::here(data, \"4sps_compiled.tsv\")) %&gt;% \n  dplyr::rename(f = f_thresh)",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "iii) Species quartets"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html",
    "title": "Calibrate boilprep to Qiagen DNeasy",
    "section": "",
    "text": "Show/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(metacal)\nlibrary(scales)\nsource(here::here(\"R\", \"utils_generic.R\"))\n\n\n\n\n\n\n\nShow/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"communities\", \"20240711_BTK_illumina_v3\")\ndata &lt;- here::here(\"data\", \"communities\", \"20240711_BTK_illumina_v3\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "ii) Batch 2024-07-11 calibration"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#libraries",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#libraries",
    "title": "Calibrate boilprep to Qiagen DNeasy",
    "section": "",
    "text": "Show/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(metacal)\nlibrary(scales)\nsource(here::here(\"R\", \"utils_generic.R\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "ii) Batch 2024-07-11 calibration"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#global-variables",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#global-variables",
    "title": "Calibrate boilprep to Qiagen DNeasy",
    "section": "",
    "text": "Show/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"communities\", \"20240711_BTK_illumina_v3\")\ndata &lt;- here::here(\"data\", \"communities\", \"20240711_BTK_illumina_v3\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "ii) Batch 2024-07-11 calibration"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#format-positive-control-samples",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#format-positive-control-samples",
    "title": "Calibrate boilprep to Qiagen DNeasy",
    "section": "3.1 Format positive control samples",
    "text": "3.1 Format positive control samples\n\n\nShow/hide code\npos_ctrl &lt;- left_join(pos_ctrl, spdf) %&gt;% \n  filter(str_detect(community_type, \"^pos\")) %&gt;%\n  # remove noise from species that aren't really there\n  filter(!is.na(evo_hist)) %&gt;% \n  group_by(sample) %&gt;% \n  mutate(f_qg = count_correct/sum(count_correct)) %&gt;% \n  dplyr::select(sample, strainID, community_id, count_correct, f_qg) %&gt;% \n  ungroup()\n\n\nJoining with `by = join_by(strainID, community_id)`",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "ii) Batch 2024-07-11 calibration"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#plot-masterplate-qiagen-and-boil-prep-side-by-side",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#plot-masterplate-qiagen-and-boil-prep-side-by-side",
    "title": "Calibrate boilprep to Qiagen DNeasy",
    "section": "3.2 Plot masterplate Qiagen and boil-prep side by side",
    "text": "3.2 Plot masterplate Qiagen and boil-prep side by side\n\nShow/hide code\nleft_join(samp_trios, mddf,\n          by = join_by(sample, replicate, strep_conc, transfers, n_species, community_type, plate_well)) %&gt;% \n  filter(community_type == \"masterplate\") %&gt;% \n  right_join(pos_ctrl, by = join_by(strainID, community_id)) %&gt;% \n  dplyr::select(community_id, strainID, f_thresh, f_qg) %&gt;% \n  pivot_longer(c(f_thresh, f_qg)) %&gt;% \n  ggplot() +\n    geom_bar(aes(y = value, x=interaction(name, community_id), fill = strainID), \n             color=\"black\",\n             linewidth=0.25, stat=\"identity\") +\n    scale_y_continuous(limits = c(0,1), expand = c(0, 0), labels = percent) +\n    scale_x_discrete(guide = guide_axis(angle = 90)) +\n    labs(x=\"\", y=\"% abundance\") +\n  theme_bw() + \n  theme(panel.grid = element_blank(),\n        legend.position = \"bottom\") +\n  scale_fill_manual(values = hambi_colors)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Bar plot of masterplate samples extracted by the boilprep method (f) or the Qiagen DNeasy kit (qg). The community trios are appended to the extraction method on the x axs",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "ii) Batch 2024-07-11 calibration"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#matrix-of-observed-counts",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#matrix-of-observed-counts",
    "title": "Calibrate boilprep to Qiagen DNeasy",
    "section": "3.3 Matrix of observed counts",
    "text": "3.3 Matrix of observed counts\n\n\nShow/hide code\nsamp_trios_counts &lt;- left_join(samp_trios, mddf,\n                               by = join_by(sample, replicate, strep_conc, \n                                            transfers, n_species, community_type, plate_well)) %&gt;% \n  filter(community_type == \"masterplate\") %&gt;% \n  filter(community_id %in% pull(pos_ctrl, community_id)) %&gt;% \n  dplyr::select(community_id, strainID, count_correct_thresh) %&gt;% \n  pivot_wider(names_from=\"strainID\", values_from=\"count_correct_thresh\") %&gt;% \n  column_to_rownames(var=\"community_id\") %&gt;% \n  mutate(across(everything(), ~replace_na(.x, 0))) %&gt;% \n  as.matrix()",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "ii) Batch 2024-07-11 calibration"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#make-a-matrix-of-true-proportions",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#make-a-matrix-of-true-proportions",
    "title": "Calibrate boilprep to Qiagen DNeasy",
    "section": "3.4 Make a matrix of true proportions",
    "text": "3.4 Make a matrix of true proportions\n\n\nShow/hide code\npos_ctrl_proportions &lt;- pos_ctrl %&gt;% \n  dplyr::select(community_id, strainID, f_qg) %&gt;%\n  pivot_wider(names_from=\"strainID\", values_from=\"f_qg\") %&gt;% \n  column_to_rownames(var=\"community_id\") %&gt;% \n  mutate(across(everything(), ~replace_na(.x, 0))) %&gt;% \n  as.matrix()",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "ii) Batch 2024-07-11 calibration"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#estimate-bias",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#estimate-bias",
    "title": "Calibrate boilprep to Qiagen DNeasy",
    "section": "4.1 Estimate bias",
    "text": "4.1 Estimate bias\n\n\nShow/hide code\nset.seed(12378)\nmc_fit_trios &lt;- metacal::estimate_bias(samp_trios_counts, pos_ctrl_proportions, 1, boot=TRUE)\nmc_fit_trios_summary &lt;- summary(mc_fit_trios)\nmc_fit_trios_summary_coef &lt;-mc_fit_trios_summary[['coefficients']]\n\n\n\n4.1.1 Plot bias estimation\n\nShow/hide code\nmc_fit_trios_summary_coef %&gt;% \n  mutate(taxon = fct_reorder(taxon, estimate)) |&gt; \n  ggplot(aes(taxon, estimate, \n             ymin = estimate / gm_se^2, ymax = estimate * gm_se^2)) +\n  geom_hline(yintercept = 1, color = \"grey\") +\n  geom_pointrange(aes(color = taxon)) +\n  scale_color_manual(values = hambi_colors) +\n  labs(x = \"\", y = \"Bias estimate\", color = \"\") +\n  coord_flip() + \n  theme_bw() +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Bias estimates for each species from the metacal procedure.\n\n\n\n\n\n4.1.2 Plot metacal model fit\n\n\nShow/hide code\na &lt;- as.data.frame(fitted(mc_fit_trios)) %&gt;% \n  rownames_to_column(var = \"sample\") %&gt;% \n  pivot_longer(-sample) %&gt;% \n  mutate(type=\"Fitted\")\n\nb &lt;- as.data.frame(pos_ctrl_proportions) %&gt;% \n  rownames_to_column(var = \"sample\") %&gt;% \n  pivot_longer(-sample) %&gt;% \n  mutate(type=\"Actual\")\n\nc &lt;- as.data.frame(samp_trios_counts/rowSums(samp_trios_counts)) %&gt;% \n  rownames_to_column(var = \"sample\") %&gt;% \n  pivot_longer(-sample,  values_to=\"observed\")\n\n\n\nShow/hide code\nbind_rows(a,b) %&gt;% \n  left_join(c, by = join_by(sample, name)) %&gt;% \n  ggplot(aes(x=observed, y=value, color = name)) +\n  geom_abline(linetype = \"dashed\") +\n  geom_point() +\n  scale_color_manual(values = hambi_colors) +\n  labs(x = \"Species proportion in boil-prepped samples\", y = \"Species proportion in Qiagen-prepped samples\", color = \"\") +\n  facet_grid(~type) + \n  coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) + \n  theme_bw() +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Porportion of each species from boil-prepped samples (x-axis) and from the Qiagen DNeasy extracted samples (y-axis) colored by species identity. The left panel shows the relationship between the two extraction procedures before correction with metacal. The right panel shows the relationship after correction. The dashed line is 1:1.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "ii) Batch 2024-07-11 calibration"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#calibrate",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#calibrate",
    "title": "Calibrate boilprep to Qiagen DNeasy",
    "section": "4.2 Calibrate",
    "text": "4.2 Calibrate\nMake a matrix of observed counts\n\n\nShow/hide code\ntrios_2_cal &lt;- left_join(samp_trios, mddf, \n                         by = join_by(sample, replicate, strep_conc, transfers, n_species, community_type, plate_well)) %&gt;% \n  dplyr::select(sample, strainID, count_correct_thresh) %&gt;% \n  pivot_wider(names_from=\"strainID\", values_from=\"count_correct_thresh\") %&gt;% \n  column_to_rownames(var=\"sample\") %&gt;% \n  mutate(across(everything(), ~replace_na(.x, 0))) %&gt;%\n  as.matrix()\n\npairs_2_cal &lt;- left_join(samp_pairs, mddf, \n                         by = join_by(sample, replicate, strep_conc, transfers, n_species, community_type, plate_well)) %&gt;% \n  dplyr::select(sample, strainID, count_correct_thresh) %&gt;% \n  pivot_wider(names_from=\"strainID\", values_from=\"count_correct_thresh\") %&gt;% \n  column_to_rownames(var=\"sample\") %&gt;% \n  mutate(across(everything(), ~replace_na(.x, 0))) %&gt;%\n  as.matrix()",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "ii) Batch 2024-07-11 calibration"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#run-the-calibrate-function",
    "href": "R/communities/amplicon/20240711_BTK_illumina_v3/02_correct_boil_to_qiagen.html#run-the-calibrate-function",
    "title": "Calibrate boilprep to Qiagen DNeasy",
    "section": "4.3 Run the calibrate function",
    "text": "4.3 Run the calibrate function\n\n\nShow/hide code\nset.seed(435761)\npairs_calibrated &lt;- metacal::calibrate(pairs_2_cal, coef(mc_fit_trios), margin=1)\ntrios_calibrated &lt;- metacal::calibrate(trios_2_cal, coef(mc_fit_trios), margin=1)\n\n\n\n\nShow/hide code\npairs_calibrated_l &lt;- data.frame(pairs_calibrated) %&gt;% \n  rownames_to_column(var = \"sample\") %&gt;% \n  pivot_longer(-sample, names_to = \"strainID\", values_to = \"f_metacal\") %&gt;% \n  filter(f_metacal &gt; 0)\n\ntrios_calibrated_l &lt;- data.frame(trios_calibrated) %&gt;% \n  rownames_to_column(var = \"sample\") %&gt;% \n  pivot_longer(-sample, names_to = \"strainID\", values_to = \"f_metacal\") %&gt;% \n  filter(f_metacal &gt; 0)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "ii) Batch 2024-07-11 calibration"
    ]
  },
  {
    "objectID": "R/communities/amplicon/02_analysis_pairs.html",
    "href": "R/communities/amplicon/02_analysis_pairs.html",
    "title": "Analysis of pairwise competition",
    "section": "",
    "text": "Contains results from pairs of all streptomycin concentrations and trios for 0 streptomycin",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "i) Species pairs"
    ]
  },
  {
    "objectID": "R/communities/amplicon/02_analysis_pairs.html#libraries",
    "href": "R/communities/amplicon/02_analysis_pairs.html#libraries",
    "title": "Analysis of pairwise competition",
    "section": "2.1 Libraries",
    "text": "2.1 Libraries\n\n\nShow/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(scales)\nlibrary(patchwork)\nlibrary(broom)\nlibrary(ggraph)\nlibrary(tidygraph)\nsource(here::here(\"R\", \"utils_generic.R\"))\nsource(here::here(\"R\", \"communities\", \"amplicon\", \"utils_amplicon.R\"))",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "i) Species pairs"
    ]
  },
  {
    "objectID": "R/communities/amplicon/02_analysis_pairs.html#global-variables",
    "href": "R/communities/amplicon/02_analysis_pairs.html#global-variables",
    "title": "Analysis of pairwise competition",
    "section": "2.2 Global variables",
    "text": "2.2 Global variables\n\n\nShow/hide code\ndata &lt;- here::here(\"data\", \"communities\")\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "i) Species pairs"
    ]
  },
  {
    "objectID": "R/communities/amplicon/02_analysis_pairs.html#species-abundances",
    "href": "R/communities/amplicon/02_analysis_pairs.html#species-abundances",
    "title": "Analysis of pairwise competition",
    "section": "3.1 Species abundances",
    "text": "3.1 Species abundances\n\n\nShow/hide code\nsamp_pairs &lt;- readr::read_tsv(here::here(data, \"2sps_compiled.tsv\")) %&gt;% \n  dplyr::rename(f = f_thresh)",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "i) Species pairs"
    ]
  },
  {
    "objectID": "R/communities/amplicon/02_analysis_pairs.html#transfer-0-starting-proportions",
    "href": "R/communities/amplicon/02_analysis_pairs.html#transfer-0-starting-proportions",
    "title": "Analysis of pairwise competition",
    "section": "4.1 Transfer 0 (starting proportions)",
    "text": "4.1 Transfer 0 (starting proportions)\nFirst get abundances from transfer 0 (masterplate)\n\n\nShow/hide code\nsamp_pairs_fmt_mp &lt;- samp_pairs %&gt;% \n  dplyr::filter(community_type == \"masterplate\") %&gt;% \n  # make a combined evolution and species identifier and extract the community ID\n  dplyr::mutate(sp = paste(str_to_upper(evo_hist), str_extract(strainID, \"\\\\d+\"), sep = \"_\"),\n         community_id = str_extract(sample, \"P\\\\d\\\\d\")) %&gt;%\n  # this step is important to ensure that when dfs are pivoted wider the \n  # sp_1 and sp_2 stay consistent \n  dplyr::arrange(community_id, sp) %&gt;%\n  # this creates an index for each species present in each community, it is needed\n  # for the pivot to be consistent between the master plate and the samples\n  dplyr::group_by(community_id) %&gt;% \n  dplyr::mutate(n = 1:n()) %&gt;% \n  dplyr::ungroup() %&gt;% \n  tidyr::pivot_wider(id_cols = community_id, values_from = c(sp, f), names_from = n) %&gt;% \n  dplyr::mutate(transfer = 0) %&gt;% \n  tidyr::expand_grid(strep_conc = c(0, 16, 64, 256)) %&gt;% \n  arrange(sp_1, sp_2, strep_conc)",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "i) Species pairs"
    ]
  },
  {
    "objectID": "R/communities/amplicon/02_analysis_pairs.html#transfer-8-ending-proportions",
    "href": "R/communities/amplicon/02_analysis_pairs.html#transfer-8-ending-proportions",
    "title": "Analysis of pairwise competition",
    "section": "4.2 Transfer 8 (ending proportions)",
    "text": "4.2 Transfer 8 (ending proportions)\nFormat abundances from the experiment, summarizing over replicates. Here we calculate the median frequency across biological replicates using Hmisc::smedian.hilow which computes the sample median and the outer quantiles (0.025 and 0.975).\n\n\nShow/hide code\nsamp_pairs_fmt_exp &lt;- samp_pairs %&gt;% \n  dplyr::filter(community_type == \"experiment\") %&gt;% \n  # make a combined evolution and species identifier and extract the community ID\n  dplyr::mutate(sp = paste(str_to_upper(evo_hist), str_extract(strainID, \"\\\\d+\"), sep = \"_\"),\n         community_id = str_extract(sample, \"P\\\\d\\\\d\")) %&gt;%\n  # calculate median and 95% CI across replicates\n  dplyr::summarize(ggplot2::median_hilow(f), .by = c(\"community_id\", \"sp\", \"strep_conc\")) %&gt;% \n  # rename the y columns as f for compatibility\n  dplyr::rename_with(.cols = starts_with(\"y\"), \\(x) str_replace(x, \"y\", \"f\")) %&gt;% \n  # this step is important to ensure that when dfs are pivoted wider the \n  # sp_1 and sp_2 stay consistent \n  dplyr::arrange(community_id, sp, strep_conc) %&gt;%\n  # this creates an index for each species present in each community, it is needed\n  # for the pivot to be consistent between the master plate and the samples\n  dplyr::group_by(community_id, strep_conc) %&gt;% \n  dplyr::mutate(n = 1:n()) %&gt;% \n  dplyr::ungroup() %&gt;% \n  tidyr::pivot_wider(id_cols = c(community_id, strep_conc), values_from = c(sp, f, fmin, fmax), names_from = n) %&gt;% \n  dplyr::mutate(transfer = 8) %&gt;% \n  arrange(sp_1, sp_2, strep_conc)",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "i) Species pairs"
    ]
  },
  {
    "objectID": "R/communities/amplicon/02_analysis_pairs.html#binomial-sampling-and-wilcox-test",
    "href": "R/communities/amplicon/02_analysis_pairs.html#binomial-sampling-and-wilcox-test",
    "title": "Analysis of pairwise competition",
    "section": "5.1 Binomial sampling and Wilcox test",
    "text": "5.1 Binomial sampling and Wilcox test\nFirst need to determine which samples significantly decreased/increased from T0 to T8. We don’t have enough biological replicates for to compute a statistic across replicates for outcome variability. However, we can estimate the mean fraction of A and quantify the inferential uncertainty of the mean by bootstrap resampling. We the used median proportion of species A from two biological replicates of each T8 pair as the probability of success (i.e., drawing species A) from 1000 draws (i.e., sequencing reads) from the binomial distribution. To determine whether the frequency of Species A significantly changed from T0 to T8, the means of the 1000 binomial draws for T0 and T8 were compared using a Wilcoxon rank sum test (N = 2000). Tests with Bonferroni multiple test corrected p values &lt; 1e-5 were considered to represent significantly different T0 and T8 samples.\n\n\nShow/hide code\nset.seed(124341)\n\n# first join the T0 and T8 abundances\nwc_test &lt;- left_join(samp_pairs_fmt_exp, samp_pairs_fmt_mp, by = join_by(community_id, strep_conc, sp_1, sp_2)) %&gt;% \n  dplyr::mutate(delta_f_1 = f_1.x - f_1.y) %&gt;% \n  dplyr::select(community_id, strep_conc, sp_1, sp_2, delta_f_1, f_1_8 = f_1.x, f_1_0 = f_1.y, \n                f_2_8 = f_2.x, f_2_0 = f_2.y) %&gt;% \n  tidyr::nest(data = c(-community_id, -strep_conc)) %&gt;%\n  # samples 1000 draws from binomial distribution using f_a median as the probability of success\n  dplyr::mutate(f_1_0_rs = purrr::map(data, \\(x) map(1:100, \\(i) sum(rbinom(1000, 1, x$f_1_0))/1000)),\n         f_1_8_rs = purrr::map(data, \\(x) map(1:100, \\(i) sum(rbinom(1000, 1, x$f_1_8))/1000))) %&gt;% \n  tidyr::unnest(cols = c(data, f_1_0_rs, f_1_8_rs)) %&gt;% \n  # nest the samples\n  tidyr::nest(bs = c(f_1_0_rs, f_1_8_rs)) %&gt;%\n  # perform the wilcox test\n  dplyr::mutate(wc = purrr::map(bs, \\(i) wilcox.test(x = as.numeric(i$f_1_0_rs), y = as.numeric(i$f_1_8_rs)))) %&gt;% \n  # tidy-ify the test output\n  dplyr::mutate(tidy_wc = purrr::map(wc, \\(x) broom::tidy(x))) %&gt;% \n  tidyr::unnest(cols = c(tidy_wc)) %&gt;% \n  # p-value adjust using bonferroni correction\n  dplyr::mutate(p_adjusted = p.adjust(p.value, method = \"bonferroni\", n = n())) %&gt;% \n  dplyr::arrange(strep_conc, sp_1, sp_2) %&gt;% \n  # define whether change is significantly positive or negative\n  dplyr::mutate(change = dplyr::case_when(p.value &gt; 1e-5 ~ 0,\n                             sign(delta_f_1) == -1 & p.value &lt;= 1e-5 ~ -1, \n                             sign(delta_f_1) == 1 & p.value &lt;= 1e-5 ~ 1))",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "i) Species pairs"
    ]
  },
  {
    "objectID": "R/communities/amplicon/02_analysis_pairs.html#competition-outcome-rules",
    "href": "R/communities/amplicon/02_analysis_pairs.html#competition-outcome-rules",
    "title": "Analysis of pairwise competition",
    "section": "5.2 Competition outcome rules",
    "text": "5.2 Competition outcome rules\nHere we set up the rules for defining the competition outcomes. In the pairwise competition experiments each species and evolutionary form was competed against all other species and evolutionary forms (excluding evolutionary forms of the same species because these cannot be resolved using amplicon data). Each competitor in a pair \\(\\{A, B\\}\\) was allowed to invade from rare (\\(f^{R} = 0.1\\)) while the other competitor was common (\\(f^{C} = 0.9\\)) in duplicate for 8 growth cycles resulting in 4 experiments for each competing pair. We used a \\(f_{extinct} = 0.01\\) frequency threshold for deciding whether a species was operationally extinct and a $| _{(t8-t0)} f | $ change over 8 growth cycles to decide whether the magnitude of change over the 8 growth cycles was appreciable. Using the abundance outcomes from both replicates of each the pairwise competition experiments for each pair we classified outcomes as “competitive exclusion”, “coexistence”, “bistability”, or “inconclusive” according to the following criteria:\n\n5.2.1 Bistability\nRequires each species in a pair to significantly increase (\\(\\Delta f_{\\{A, B\\}} \\geq 0.05\\)) when starting from common and significantly decrease (\\(\\Delta f_{\\{A, B\\}} \\leq -0.05\\)) in abundance when invading from rare over the 8 growth cycles.\n\n\n5.2.2 Competitive exclusion\nCompetitive exclusion means one species of a pair excludes the other to it’s (eventual) extinction. We classified competitive exclusion as “Stable” or “Incomplete” based on the following features:\n\n5.2.2.1 Stable\nStable exclusion requires one species in a pair to go extinct (below 1% abundance detection limit threshold) in all 4 experiments performed for the two species. It also requires that the species undergoing extinction should always decrease over the 8 growth cycles by at least 5%. In practice this excludes samples where the extinct species started so rare that it was already effectively extinct.\n\\[\n\\begin{align*}\n& {f_{\\{A, B\\}}}_{t8} \\leq f_{extinct} \\\\\n& \\Delta f_{\\{A, B\\}} \\leq -0.05 \\\\\n\\end{align*}\n\\]\n\n\n5.2.2.2 Incomplete\nIncomplete exclusion results if one of the species at cycle 8 is not extinct but its frequency significantly decreased over 8 growth cycles in all four experiments (Wilcoxon test, P&lt;0.05, N=2000 in each experiment).\n\\[\n\\begin{align*}\n& {f_{\\{A, B\\}}}_{t8} &gt; f_{extinct} \\\\\n& \\Delta f_{\\{A, B\\}} \\leq -0.05, \\space p &lt; 0.05 \\\\\n\\end{align*}\n\\]\n\n\n\n5.2.3 Coexistence\nWe classified a pair as coexisting if both species are able to invade each other from low frequency. We classified competitive exclusion as “Stable” or “Incomplete” based on differing levels of supporting evidence.\n\n5.2.3.1 Stable\nWe defined “Stable Coexistence” as those species pairs where each species could invade the other from rare (fulfillment of the mutual invasibility criterion). table coexistence results if each species exists outside the extinction threshold and over 8 growth cycles and could significantly increase (Wilcoxon test, P&lt;0.05, N=2000 in each experiment)by at least 5% from rare in both replicates.\n\\[\n\\begin{align*}\n& {f_{\\{A, B\\}}^{Rare}}_{t8} &gt; f_{extinct} \\\\\n& \\Delta f_{\\{A, B\\}}^{Rare} \\geq 0.05, \\space p &lt; 0.05 \\\\\n\\end{align*}\n\\]\n\n\n5.2.3.2 Incomplete\nWe defined “Incomplete coexistence” as those species pairs that were found together after 8 growth cycles but no condition was placed on the significance of the change of each species from T0 to T8. For example, if a species started from low abundance and after 8 growth cycles also ended at low abundance that was not significantly different from the starting abundance.\n\\[\n\\begin{align*}\n& {f_{\\{A, B\\}}}_{t8} &gt; f_{extinct} \\\\\n\\end{align*}\n\\]\n\n\n5.2.3.3 Inconclusive outcomes\nThis category included pairs that did not meet the requirements to be classified in any of the above described categories.\n\n\nShow/hide code\n# upper threshold for deciding whether a species goes extinct\nupper &lt;- 0.99\n# lower threshold for deciding whether a species goes extinct\nlower &lt;- 0.01\n# slope change threshold for deciding whether change from T0 to T8 is important (e.g. requires at least a 5% change of the focal species) \nslope_thresh &lt;- 0.05\n\noutcomes_classified &lt;- wc_test %&gt;% \n  dplyr::group_by(strep_conc, sp_1, sp_2) %&gt;% \n  dplyr::mutate(outcome = dplyr::case_when(# Bistability: Requires sp_1 to both increase from T0 high freq and decrease from T0 low freq\n                             sum(change &lt; 0 & f_1_0 == min(f_1_0), change &gt; 0 & f_1_0 == max(f_1_0)) == 2 ~ \"bistable_stable\",\n                             # Exclusion: sp_1 increases from both low and high T0 freqs and T8 freq is &gt; than the T0 high freq\n                             sum(change) == 2 & f_1_8 &gt;= upper & abs(delta_f_1) &gt; slope_thresh ~ \"exclusion_stable\", \n                             # Exclusion: sp_1 decreases from both low and high T0 freqs and T8 freq is &lt; than the T0 low freq\n                             sum(change) == -2 & f_1_8 &lt;= lower & abs(delta_f_1) &gt; slope_thresh ~ \"exclusion_stable\",\n                             # Coexistence: sp_1 significantly increases from rare and significantly decreases from abundant\n                             sum(change) == 0 & dplyr::if_else(f_1_0 == pmin(f_1_0, f_2_0), f_1_8 &gt; f_1_0, f_1_8 &lt; f_1_0) ~ \"coexistence_stable\",\n                             # Incomplete coexistence: sp_1 is found within extinction thresholds in both experiments, but no condition is\n                             # placed on the significance of the change from T0 to T8\n                             sum(dplyr::between(f_1_8, lower, upper)) == 2 ~ \"coexistence_incomplete\",\n                             # Incomplete exclusion: sp_1 is outside of the extinction threshold (extinct) for at least one sample and within the the \n                             # threshold for the other sample.\n                             sum(!dplyr::between(f_1_8, lower, upper)) == 1 & sum(dplyr::between(f_1_8, lower, upper)) == 1 ~ \"exclusion_incomplete\",\n                             # Inconclusive: samples failing to meet any of the above rules\n                             TRUE ~ \"inconclusive_\")) %&gt;% \n  dplyr::ungroup() %&gt;% \n  dplyr::mutate(type = dplyr::if_else(stringr::str_detect(outcome, \"incomplete\"), \"incomplete\", \"stable\"),\n         outcome = stringr::str_extract(outcome, \"(^.+)_.*\", group = 1)) %&gt;% \n  dplyr::relocate(outcome, type, change)",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "i) Species pairs"
    ]
  },
  {
    "objectID": "R/communities/amplicon/02_analysis_pairs.html#plotting-pairwise-outpcomes",
    "href": "R/communities/amplicon/02_analysis_pairs.html#plotting-pairwise-outpcomes",
    "title": "Analysis of pairwise competition",
    "section": "5.3 Plotting pairwise outpcomes",
    "text": "5.3 Plotting pairwise outpcomes\nConstruct final dataframe to be used for plotting\n\n\nShow/hide code\nsamp_pairs_fmt &lt;- dplyr::bind_rows(samp_pairs_fmt_mp, samp_pairs_fmt_exp) %&gt;%\n  dplyr::mutate(\n    group = interaction(community_id, strep_conc),\n    evo_group = dplyr::case_when(\n      dplyr::if_all(c(sp_1, sp_2), \\(x) stringr::str_detect(x, \"ANC\")) ~ \"both_anc\",\n      dplyr::if_all(c(sp_1, sp_2), \\(x) stringr::str_detect(x, \"EVO\")) ~ \"both_evo\",\n      TRUE ~ \"mix\"\n    )\n  ) %&gt;%\n  dplyr::left_join(outcomes_classified,\n                   by = dplyr::join_by(community_id, sp_1, sp_2, strep_conc)) %&gt;%\n  dplyr::mutate(\n    outcome = factor(outcome, levels = c(\"exclusion\", \"coexistence\", \n                                         \"bistable\", \"inconclusive\")),\n    type = factor(type, levels = c(\"stable\", \"incomplete\"))\n  )\n\n\nCreate different lists of plots for the mixed (i.e. evo competed against anc) conditions\n\n\nShow/hide code\nsamp_pairs_fmt_plots_split_a &lt;- samp_pairs_fmt %&gt;% \n  dplyr::filter(evo_group != \"mix\") %&gt;% \n  dplyr::group_by(strep_conc, evo_group) %&gt;% \n  dplyr::group_split() %&gt;% \n  purrr::map(pair_plot)\n\nsamp_pairs_fmt_plots_split_b &lt;- samp_pairs_fmt %&gt;% \n  dplyr::filter(evo_group == \"mix\") %&gt;% \n  dplyr::group_by(strep_conc) %&gt;% \n  dplyr::group_split() %&gt;% \n  purrr::map(pair_plot)\n\n\n\n\nShow/hide code\nfig01 &lt;- patchwork::wrap_plots(samp_pairs_fmt_plots_split_a, ncol = 2) +\n  patchwork::plot_annotation(tag_levels = \"A\")\n\n\n\n\nShow/hide code\nggsave(\n  here::here(\"figs\", \"coexistence_pairs.svg\"),\n  fig01,\n  width = 7,\n  height = 12,\n  units = \"in\",\n  device = \"svg\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Outcomes from pairwise cocultures of ancestral (left, A:G) and streptomycin adapted (right, B:H) 0403, 1287, 1896 and 1977 species. Rows in the grid represent differen streptomycin concentrations applied (A:B = 0 µg/ml, C:D = 16 µg/ml, E:F = 64 µg/ml, G:H = 256 µg/ml). Using the rules defined above, red lines show cocultures resulting in exclusion of one of the species, blue lines show cocultures that resulted in coexistence, and purple lines represent inconclusive outcomes due to lack of data or exception to therules. Solid lines show a “definite” outcome and dashed lines show a potentially “incomplete” outcome. Two solid lines of the same color indicate stable coexistence or stable exclusion, a solid and dashed line indicate incomplete coexistence/exclusion, while two dashed lines indicates coexistence without evidence of mutual invasibility. Note some statistical noise has been applied to point positions to prevent overlaps in the plot and aid in visualization. NOTE: that in panel E (64 µg/ml streptomycin) both replicates survived with OD ~ 0.15 when ANC_0403 was started from 90% abundance but not when it was started at 10% abundance (OD ~ 0.04). In all replicates of 90%/10% starting abundance ANC_1977 was driven extinct.\n\n\n\n\n\nShow/hide code\nfig02 &lt;- patchwork::wrap_plots(samp_pairs_fmt_plots_split_b, ncol = 2) +\n  patchwork::plot_annotation(tag_levels = \"A\")\n\n\n\n\nShow/hide code\nggsave(\n  here::here(\"figs\", \"coexistence_pairs_mixed_hist.svg\"),\n  fig02,\n  width = 7,\n  height = 7,\n  units = \"in\",\n  device = \"svg\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Results from co-cultures of mixed ancestal and evolved combinations. Line colors and types are as in Figure 1, with the addition of green showing bistability (i.e., Species A and Species B exclude each other when invading from high abundance, and each are excluded by the other when invading from low abundance).",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "i) Species pairs"
    ]
  },
  {
    "objectID": "R/communities/amplicon/02_analysis_pairs.html#evolution-and-streptomycin-categories-separate",
    "href": "R/communities/amplicon/02_analysis_pairs.html#evolution-and-streptomycin-categories-separate",
    "title": "Analysis of pairwise competition",
    "section": "6.1 Evolution and Streptomycin categories separate",
    "text": "6.1 Evolution and Streptomycin categories separate\nHere we plot a separate graph for each streptomycin concentrations and also by different evolutionary groupings. For example, there is one graph for the competition outcomes of only ancestral species, there is one graph of the outcomes of only evolved species, and there is one graph for the outcomes of mixed competitions where an ancestral species competes against an evolved species.\n\n\nShow/hide code\nnodes1 &lt;- make_nodes(samp_pairs_fmt, evo_group, strep_conc)\nedges1 &lt;- make_edges(samp_pairs_fmt, evo_group, strep_conc)\n\ngraphs1 &lt;- nest(nodes1, sps = -c(evo_group, strep_conc)) %&gt;% \n  left_join(nest(edges1, pairs = -c(evo_group, strep_conc)),\n            by = join_by(evo_group, strep_conc)) %&gt;% \n  mutate(network = map2(sps, pairs, function(sps, pairs) tbl_graph(nodes = sps, edges = pairs, directed = T))) %&gt;% \n  mutate(plot = map(network, function(network) plot_network_hierarchy(network, tune_angle = 1.5, n_rank = 7, n_break = 7)))\n\n\n\n\nShow/hide code\nfig03 &lt;- patchwork::wrap_plots(graphs1[[6]], nrow = 3, guides= \"collect\") +\n  patchwork::plot_annotation(tag_levels = \"A\")\n\n\n\n\nShow/hide code\nggsave(\n  here::here(\"figs\", \"coexistence_networks_nested_evo_strep.svg\"),\n  fig03,\n  width = 8,\n  height = 10,\n  units = \"in\",\n  device = \"svg\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Competitive hierarchy of species pairs separated by evolution grouping (only ancestral pairs, only evolved pairs, and mixed ancestral and evolved pairs) and streptomycin concentration. Subplots A-D are for only ancestral pairs, E-H for only evolved pairs, and I-L for mixed ancestral and evolved pairs. Subplots A, E, I show experiments under no streptomycin, B, F, J 16 µg/ml streptomycin, C, G, K for 64 µg/ml streptomycin, and D, H, L for 256 µg/ml streptomycin. For each evolution/streptomycin grouping, strains are rank ordered on the basis of the number of other strains they exclude, based on data shown in Figure 1 and Figure 2. Grey nodes represent strains (denoted by text), red arrows point from winning strain to losing strain, blue arrows indicate coexistence (ignore the arrow heads for blue, coulnd’t figure out how to remove them for only a subset of the edges), and green arrows indicate the presence of bistability (i.e., Species A and Species B exclude each other when invading from high abundance, and each are excluded by the other when invading from low abundance). Line type indicates the degree of certainty of the outcome in each pair: dashed lines represent incomplete exclusion or coexistence without evidence of mutual invasibility, while solid lines indicate complete exclusion or stable coexistence (mutual invasibility).",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "i) Species pairs"
    ]
  },
  {
    "objectID": "R/communities/amplicon/02_analysis_pairs.html#only-streptomycin-category-separate",
    "href": "R/communities/amplicon/02_analysis_pairs.html#only-streptomycin-category-separate",
    "title": "Analysis of pairwise competition",
    "section": "6.2 Only Streptomycin category separate",
    "text": "6.2 Only Streptomycin category separate\n\n\nShow/hide code\nnodes2 &lt;- make_nodes(samp_pairs_fmt, strep_conc)\nedges2 &lt;- make_edges(samp_pairs_fmt, strep_conc)\n\ngraphs2 &lt;- nest(nodes2, sps = -c(strep_conc)) %&gt;% \n  left_join(nest(edges2, pairs = -c(strep_conc)),\n            by = join_by(strep_conc)) %&gt;% \n  mutate(network = map2(sps, pairs, function(sps, pairs) tbl_graph(nodes = sps, edges = pairs, directed = T))) %&gt;% \n  mutate(plot = map(network, function(network) plot_network_hierarchy(network, tune_angle = 1.5, n_rank = 7, n_break = 7)))\n\n\n\n\nShow/hide code\nfig04 &lt;- patchwork::wrap_plots(graphs2[[5]], nrow = 1, guides= \"collect\") +\n  patchwork::plot_annotation(tag_levels = \"A\")\n\n\n\n\nShow/hide code\nggsave(\n  here::here(\"figs\", \"coexistence_networks_nested_strep.svg\"),\n  fig04,\n  width = 9,\n  height = 4,\n  units = \"in\",\n  device = \"svg\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: Competitive hierarchy of species pairs separated by streptomycin concentration. Subplot A shows experiments under no streptomycin, B with 16 µg/ml streptomycin, C with 64 µg/ml streptomycin, and D with 256 µg/ml streptomycin. For each evolution/streptomycin grouping, strains are rank ordered on the basis of the number of other strains they exclude, based on data shown in Figure 1 and Figure 2. Grey nodes represent strains (denoted by text), red arrows point from winning strain to losing strain, blue arrows indicate coexistence (ignore the arrow heads for blue, coulnd’t figure out how to remove them for only a subset of the edges), and green arrows indicate the presence of bistability (i.e., Species A and Species B exclude each other when invading from high abundance, and each are excluded by the other when invading from low abundance). Line type indicates the degree of certainty of the outcome in each pair: dashed lines represent incomplete exclusion or coexistence without evidence of mutual invasibility, while solid lines indicate complete exclusion or stable coexistence (mutual invasibility).",
    "crumbs": [
      "5. Community growth - Coexistence/exclusion analysis",
      "i) Species pairs"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(archive)\nlibrary(scales)\nsource(here::here(\"R\", \"utils_generic.R\"))\nsource(here::here(\"R\", \"communities\", \"amplicon\", \"utils_amplicon.R\"))\n\n\n\n\n\n\n\nShow/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"communities\", \"20250127_BTK_illumina_v3\")\ndata &lt;- here::here(\"data\", \"communities\", \"20250127_BTK_illumina_v3\")\namplicontar_01 &lt;- here::here(data_raw, \"rbec_output_01.tar.gz\")\namplicontar_02 &lt;- here::here(data_raw, \"rbec_output_02.tar.gz\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)\n\n# create temporary location to decompress\ntmpdir_01 &lt;- fs::file_temp()\ntmpdir_02 &lt;- fs::file_temp()",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#libraries",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#libraries",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(archive)\nlibrary(scales)\nsource(here::here(\"R\", \"utils_generic.R\"))\nsource(here::here(\"R\", \"communities\", \"amplicon\", \"utils_amplicon.R\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#global-variables",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#global-variables",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "",
    "text": "Show/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"communities\", \"20250127_BTK_illumina_v3\")\ndata &lt;- here::here(\"data\", \"communities\", \"20250127_BTK_illumina_v3\")\namplicontar_01 &lt;- here::here(data_raw, \"rbec_output_01.tar.gz\")\namplicontar_02 &lt;- here::here(data_raw, \"rbec_output_02.tar.gz\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)\n\n# create temporary location to decompress\ntmpdir_01 &lt;- fs::file_temp()\ntmpdir_02 &lt;- fs::file_temp()",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#untar-rbec-output-tarball",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#untar-rbec-output-tarball",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "3.1 Untar Rbec output tarball",
    "text": "3.1 Untar Rbec output tarball\n\n\nShow/hide code\narchive::archive_extract(\n  amplicontar_01,\n  dir = tmpdir_01,\n  files = NULL,\n  options = character(),\n  strip_components = 0L\n)\n\narchive::archive_extract(\n  amplicontar_02,\n  dir = tmpdir_02,\n  files = NULL,\n  options = character(),\n  strip_components = 0L\n)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#setup-directory-structure",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#setup-directory-structure",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "3.2 Setup directory structure",
    "text": "3.2 Setup directory structure\n\n\nShow/hide code\ntabdir_01 &lt;- here::here(tmpdir_01, \"rbec_output_01\")\nsamppaths_01 &lt;- fs::dir_ls(tabdir_01)\nsampnames_01 &lt;- path_split(samppaths_01) %&gt;% \n  map_chr(dplyr::last)\n\ntabdir_02 &lt;- here::here(tmpdir_02, \"rbec_output_02\")\nsamppaths_02 &lt;- fs::dir_ls(tabdir_02)\nsampnames_02 &lt;- path_split(samppaths_02) %&gt;% \n  map_chr(dplyr::last)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#read",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#read",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "3.3 Read",
    "text": "3.3 Read\n\n\nShow/hide code\nstraintabs_01 &lt;- paste0(samppaths_01, \"/strain_table.txt\") %&gt;% \n  set_names(sampnames_01) %&gt;% \n  map_df(\n  read_tsv,\n  skip = 1,\n  col_names = c(\"rRNA16S_locus\",\"count\"),\n  show_col_types = FALSE, \n  .id = \"sample\")\n\nstraintabs_02 &lt;- paste0(samppaths_02, \"/strain_table.txt\") %&gt;% \n  set_names(sampnames_02) %&gt;% \n  map_df(\n  read_tsv,\n  skip = 1,\n  col_names = c(\"rRNA16S_locus\",\"count\"),\n  show_col_types = FALSE, \n  .id = \"sample\")",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#clean-up",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#clean-up",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "3.4 Clean up",
    "text": "3.4 Clean up\n\n\nShow/hide code\n# remove decompressed directory from temp location\nfs::dir_delete(tmpdir_01)\nfs::dir_delete(tmpdir_02)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#negative-controls",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#negative-controls",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.1 Negative controls",
    "text": "5.1 Negative controls\nWe’ll check whether the experimental and plate negative controls look good. First lets check what species are contaminating negative controls.\n\nShow/hide code\nfinaltable %&gt;% \n  filter(str_detect(community_type, \"^neg\")) %&gt;% \n  filter(f_raw &gt; 0) %&gt;%\n  # here we'll use the maximum threshold identified in the histogram above. On\n  # average we get a little less than 1000 reads for samples that contain no\n  # cells/growth. This is just a technical artefact due to PCR steps involved in\n  # multiplexing and library preparation\n  filter(sample_tot_raw &gt; 3000) %&gt;% \n  contam_histogram(trans=TRUE, f_raw) +\n  labs(x = \"Frequency distribution of each species in the negative controls\", y = \"Sample count\") +\n  facet_wrap(~strainID)\n\n\n\n\n\n\n\n\n\nFigure 2: Frequency distribution of all species in the negative controls\n\n\n\nMost appear to be low abundance contaminants of species excluded from the experiment. Probably this is cross talk from the positive controls which included the entire mock community.\n\nShow/hide code\nfinaltable %&gt;% \n  filter(str_detect(community_type, \"^neg\")) %&gt;% \n  filter(str_detect(strainID, \"0403|1287|1896|1977\")) %&gt;% \n  filter(f_raw &gt; 0) %&gt;% \n  filter(sample_tot_raw &gt; 3000) %&gt;% \n  contam_histogram(trans=TRUE, f_raw) +\n  labs(x = \"Frequency distribution of each species in the negative controls\", y = \"Sample count\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Frequency distribution of only target target species in the negative controls\n\n\n\nThere seem to be much higher abundances of off-target species in this sequencing batch compared to the last one. This could be legitimate contamination or it could be down to weirdness in the library preparation.\nNext we’ll investigate whether the negative control samples have low OD in the endpoint samples. This would indicate growth and that what we are seeing in the histograms is some kind of sequencing artifact and not real contamination.\n\n\nShow/hide code\nod &lt;- read_tsv(here::here(\"_data_raw\", \"communities\", \"optical_density\", \"20240829_tqs\", \"optical_density_formatted_012025.txt\")) %&gt;% \n  mutate(well = stringr::str_replace(well,\n                     pattern = \"([0-9]+)\", \n                     replacement = {\\(x) stringr::str_pad(string = x, width = 2,  side = \"left\",  pad = \"0\")}))\n\n\nRows: 5761 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (2): sample, well\ndbl (5): transfers, n_species, strep_conc, replicate, OD\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nShow/hide code\nleft_join(finaltable, od, by = join_by(sample, transfers, strep_conc, replicate)) %&gt;% \n  filter(str_detect(community_type, \"^neg|^pos\")) %&gt;% \n  dplyr::select(sample, OD, well, community_type, transfers, replicate) %&gt;% \n  distinct() %&gt;% \n  filter(!is.na(OD)) %&gt;% \n  ggplot(aes(x = OD)) +\n  geom_histogram(bins = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: OD distribution of negative controls.\n\n\n\nOK, so clearly the vast majority of negative controls have very low OD (OD &lt; 0.1) and it is safe to assume that they are clean. However, there are ~10 that may have growth in them. We will need to flag these samples as likely contaminated.\n\n\nShow/hide code\ndf &lt;- left_join(finaltable, od, by = join_by(sample, transfers, strep_conc, replicate)) %&gt;% \n  filter(str_detect(community_type, \"^neg|^pos\")) %&gt;% \n  dplyr::select(sample, OD, well, community_type, n_species.x, n_species.y, transfers, replicate) %&gt;% \n  distinct() %&gt;% \n  filter(!is.na(OD)) %&gt;% \n  arrange(desc(OD))\n\ndf %&gt;% \n  left_join(finaltable, by = join_by(sample, community_type, transfers, replicate, n_species.x==n_species)) %&gt;% \n  filter(f_raw &gt; 0) %&gt;% \n  filter(str_detect(strainID, \"0403|1287|1896|1977\")) %&gt;% \n  relocate(sample_tot_raw)\n\n\n\n  \n\n\n\nThis looks OK… Specifically, there are 186 negative control samples but only 8 (4.3 % of negative controls) have any appreciable OD contamination. I think this is quite good and a testament to how clean the experiment has been overall.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#positive-controls",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#positive-controls",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.2 Positive controls",
    "text": "5.2 Positive controls\nThe positive community controls should each have all 23 species.\n\n\nShow/hide code\nfinaltable %&gt;% \n  filter(str_detect(community_type, \"^pos\") & count_correct &gt; 0) %&gt;% \n  group_by(sample) %&gt;%\n  mutate(n_sp_detected = n()) %&gt;% \n  distinct(sample, sample_tot_raw, n_sp_detected)\n\n\n\n  \n\n\n\nAll community positive controls have plenty of reads, have all 23 species detected, and otherwise look normal.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#misassigned-reads",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#misassigned-reads",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.3 Misassigned reads",
    "text": "5.3 Misassigned reads\nThese libraries were only prepared with samples containing HAMBI_0403, HAMBI_1287, HAMBI_1896, and HAMBI_1977 so any time species other than these show up is just an incorrect assignment by Rbec or index leakage/crosstalk from the positive community controls. Let’s check quickly how many of these there are…\n\n\nShow/hide code\nfinaltable %&gt;% \n  # filter out positive community controls since they have all hambi species\n  filter(!str_detect(community_type, \"^pos\")) %&gt;% \n  filter(!str_detect(strainID, \"0403|1287|1896|1977\")) %&gt;% \n  filter(count_correct &gt; 0) %&gt;% \n  arrange(desc(count_correct))\n\n\n\n  \n\n\n\nthere are only a couple of random reads per experimental sample. Some samples have very high total read counts and it is likely that off-target species leaked into them due to crosstalk and index leakage.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#samples-with-few-total-reads",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#samples-with-few-total-reads",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.4 Samples with few total reads",
    "text": "5.4 Samples with few total reads\nSome of the experimental pairs had streptomycin concentrations higher than any of the species individually could tolerate. We would expect then that no species would grow successfully in these samples and that the overall biomass would be very low, thus resulting in a low number of recovered reads from these samples.\nTo look into this. first let’s check which samples have very low OD600 in the endpoint samples. We’ll filter out samples with an OD of less than 0.1 or samples with fewer than 3000 reads. It is generally good practice to exclude samples with low number of reads.\n\n\nShow/hide code\ndf &lt;- left_join(finaltable, od, \n                 by = join_by(sample, transfers, strep_conc, replicate)) %&gt;% \n  filter(transfers == 8) %&gt;% \n  filter(OD &lt; 0.1 | sample_tot_raw &lt; 3000) %&gt;% \n  distinct(sample, community_type, OD, sample_tot_raw) \n\nlowread_samps &lt;- df %&gt;% \n  filter(sample_tot_raw &lt; 3000 & community_type == \"experiment\") %&gt;% \n  distinct(sample) %&gt;% \n  pull(sample)\n\ndf %&gt;% \n  count(community_type)\n\n\n\n  \n\n\n\nthe low OD samples are all negative or positive controls. However there are 11 samples from the main experiment that failed at the sequencing step (i.e., they had normal optical density)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#filter-to-target-species",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#filter-to-target-species",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.5 Filter to target species",
    "text": "5.5 Filter to target species\nExclude positive and negative controls and also exclude species that are not in the focal 4\n\n\nShow/hide code\nfinaltable_exp_mstr &lt;- finaltable %&gt;% \n  filter(community_type %nin% c(\"empty\", \"neg_control\", \"pos_control\")) %&gt;% \n  filter(sample %nin% lowread_samps) %&gt;% \n  filter(strainID %in% c(\"HAMBI_0403\", \"HAMBI_1287\", \"HAMBI_1896\", \"HAMBI_1977\")) %&gt;% \n  group_by(sample) %&gt;% \n  mutate(f_raw_targetsp = count_correct/sum(count_correct),\n         sample_tot_targetsp = sum(count_correct)) %&gt;% \n  ungroup() %&gt;% \n  relocate(c(sample_tot_targetsp, f_raw_targetsp), .after = f_raw)",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#experimental-samples",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#experimental-samples",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "5.6 Experimental samples",
    "text": "5.6 Experimental samples\nWe may need to use a higher threshold than 1% (e.g., 3% frequency) because over 3% we can reliably say that a species is present and it is not due to index cross talk.\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  # there are only experiment samples left\n  #filter(str_detect(community_type, \"experiment\")) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  contam_histogram(trans=TRUE, x = f_raw_targetsp) +\n  labs(x = \"Species frequency\", y = \"Sample count\") +\n  ggtitle(\"Frequency distribution of each species exceeding the 3% threshold\")\n\n\n\n\n\n\nWarning in scale_x_continuous(trans = \"log10\", labels = percent, guide =\nguide_axis(angle = 90)): log-10 transformation introduced infinite values.\n\n\nWarning: Removed 8 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Frequency distribution of each species in experimental samples where it should not occur and where it exceeds a 3% threshold.\n\n\n\n\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  # there are only experiment samples left\n  #filter(str_detect(community_type, \"experiment\")) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw_targetsp &gt; 0.03 ) %&gt;% \n  dplyr::select(sample, strainID, f_raw_targetsp) %&gt;% \n  arrange(desc(f_raw_targetsp))\n\n\n\n  \n\n\n\nThere are 63 samples (7% of 949 samples) that exceed a 3% crosstalk threshold. 57 samples (6% of 949 samples) have contamination &lt;= 13% and 6 samples (1 % of 949 samples) have &gt; 13% of a species that should not be there. In most cases the species in highly contaminated samples is HAMBI_1977. I think these 6 samples are probably at very high risk for legitimate contamination. It is likely that the rest of the 57 samples with &lt;= 13% contamination are not contaminated but just crosstalk outliers.\n\n5.6.1 Trios\nHere just taking a closer look at the trios from the experiment that appear to be contaminated.\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\")) %&gt;% \n  filter(n_species == 3) %&gt;% \n  contaminated_barplot(threshold=0.03, quartet = FALSE, y=f_raw_targetsp) +\n  ggtitle(\"Experiment trios with &gt; 3% contamination\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: Species composition of experiment trio samples that contain &gt; 3% of a species that shouldn’t be there (shown in grey to black).\n\n\n\n\n\nShow/hide code\ncontamtrios &lt;- finaltable_exp_mstr %&gt;% \n  filter(n_species == 3) %&gt;% \n  filter(is.na(evo_hist)) %&gt;% \n  filter(f_raw_targetsp &gt; 0.13  ) %&gt;% \n  pull(sample)\n\n\nOnly 6 trio samples look really bad (~50 % contamination). Again, I think we should only exclude samples where the contamination is very high (over ~50% of the sample) but those with around 10% or less contaminant I think can be retained, and I will discard the contaminating sequences. Interestingly the lower-level contamination (3% &gt; contamination &gt; 13%) seems to be mostly from from HAMBI_1896. The high level contamination is always in well C01 on 6 different plates (3_p03_C01, 3_p04_C01, 3_p05_C01, 3_p06_C01, 3_p07_C01, 3_p08_C01).\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\")) %&gt;% \n  filter(n_species == 3) %&gt;% \n  group_by(sample) %&gt;% \n  mutate(id = cur_group_id()) %&gt;% \n  ungroup() %&gt;% \n  mutate(facet = ntile(id, 5)) %&gt;% \n  contaminated_barplot(threshold = 0, quartet = FALSE, y=f_raw_targetsp) +\n  ggtitle(\"All experimental trios\") +\n  facet_wrap(~facet, scales=\"free_x\", nrow=5) +\n  theme(\n    strip.background = element_blank(),\n    strip.text.x = element_blank(),\n    legend.position = \"bottom\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Species composition of all experiment trio samples. Species that should not be present in a sample are shown in grey to black.\n\n\n\nBut at a birds-eye view this looks pretty good overall. There are a handful (6 samples) that appear to be badly contaminated but otherwise things look good.\n\n\n5.6.2 Quartets\nAgain, one weakness of this approach is that there is no way to tell from this data whether a quartet is contaminated because every quartet (by definition) is inoculated with all of the 4 species at different frequencies and with different evolutionary histories. Thus we would expect to see either all 4 species present or a subset of the 4 species in the quartet samples, but we cannot tell if these patterns come from contamination or not. Moving forward we just have to assume that the quartets are OK… However, we’ve found so little contamination in our other experimental samples and all samples were handled in the experiment and processed for sequence library preparation in the same way. I think it is safe to assume that contamination in the quartets is minimal issue.\n\nShow/hide code\nfinaltable_exp_mstr %&gt;% \n  filter(str_detect(community_type, \"experiment\")) %&gt;% \n  filter(n_species == 4) %&gt;% \n  group_by(sample) %&gt;% \n  mutate(id = cur_group_id()) %&gt;% \n  ungroup() %&gt;% \n  mutate(facet = ntile(id, 4)) %&gt;% \n  contaminated_barplot(threshold = 0, quartet = TRUE, y=f_raw_targetsp) +\n  ggtitle(\"All experimental quartets\") +\n  facet_wrap(~facet, scales=\"free_x\", nrow=4) +\n  theme(\n    strip.background = element_blank(),\n    strip.text.x = element_blank(),\n    legend.position = \"bottom\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: Species composition of all experiment quartet samples.",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#trios-1",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#trios-1",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "6.1 Trios",
    "text": "6.1 Trios\nWrite the trio samples\n\n\nShow/hide code\nfinaltable_exp_mstr_export %&gt;% \n  filter(n_species == 3) %&gt;% \n  arrange(sample) %&gt;% \n  write_tsv(here::here(data, \"trios_counts.tsv\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#quartets",
    "href": "R/communities/amplicon/20250127_BTK_illumina_v3/01_format_rbec_tab.html#quartets",
    "title": "Formatting Rbec output from 2025-01-27 sequenced by BTK Turku using custom HAMBI Illumina v3 primers",
    "section": "6.2 Quartets",
    "text": "6.2 Quartets\nWrite the quartet samples\n\n\nShow/hide code\nfinaltable_exp_mstr_export %&gt;% \n  filter(n_species == 4) %&gt;% \n  arrange(sample) %&gt;% \n  write_tsv(here::here(data, \"quartets_counts.tsv\"))",
    "crumbs": [
      "4. Community growth - amplicon formatting",
      "iv) Batch 2025-01-27"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/01_pairs.html",
    "href": "R/communities/experiment_design/01_pairs.html",
    "title": "Designing two-species subcommunities",
    "section": "",
    "text": "Show/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggplate)\n\n\n\n\n\n\n\nShow/hide code\ndata &lt;- here::here(\"data\", \"communities\", \"experiment_design\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)\n\n\n\n\n\nSpecies color vector\n\n\nShow/hide code\nmy_colors &lt;- c(\n  \"ANC_0403_10\" = \"#ffaaaa\", \"ANC_0403_70\" = \"#aa0000\", \"ANC_0403_80\" = \"#aa0000\", \"ANC_0403_90\" = \"#aa0000\", \n  \"ANC_1287_10\" = \"#ffeeaa\", \"ANC_1287_70\" = \"#d4aa00\", \"ANC_1287_80\" = \"#d4aa00\", \"ANC_1287_90\" = \"#d4aa00\", \n  \"ANC_1896_10\" = \"#ccffaa\", \"ANC_1896_70\" = \"#44aa00\", \"ANC_1896_80\" = \"#44aa00\", \"ANC_1896_90\" = \"#44aa00\", \n  \"ANC_1977_10\" = \"#aaccff\", \"ANC_1977_70\" = \"#0055d4\", \"ANC_1977_80\" = \"#0055d4\", \"ANC_1977_90\" = \"#0055d4\",\n  \"EVO_0403_10\" = \"#ffaaee\", \"EVO_0403_70\" = \"#ff00cc\", \"EVO_0403_80\" = \"#ff00cc\", \"EVO_0403_90\" = \"#ff00cc\", \n  \"EVO_1287_10\" = \"#ffccaa\", \"EVO_1287_70\" = \"#ff6600\", \"EVO_1287_80\" = \"#ff6600\", \"EVO_1287_90\" = \"#ff6600\", \n  \"EVO_1896_10\" = \"#aaffee\", \"EVO_1896_70\" = \"#00ffcc\", \"EVO_1896_80\" = \"#00ffcc\", \"EVO_1896_90\" = \"#00ffcc\", \n  \"EVO_1977_10\" = \"#ccaaff\", \"EVO_1977_70\" = \"#7f2aff\", \"EVO_1977_80\" = \"#7f2aff\", \"EVO_1977_90\" = \"#7f2aff\"\n  )\n\n\nFor plotting plates\n\n\nShow/hide code\nplate_plot_steps &lt;- function(df, well_colmun, val_column, step, colr_vec){\n  ggplate::plate_plot(df,\n  position = {{ well_colmun }},\n  value = {{ val_column }},\n  colour = colr_vec,\n  plate_size = 96,\n  plate_type = \"round\"\n) + ggtitle(step)\n}",
    "crumbs": [
      "2. Community growth - experiment design",
      "i) Species pairs - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/01_pairs.html#libraries",
    "href": "R/communities/experiment_design/01_pairs.html#libraries",
    "title": "Designing two-species subcommunities",
    "section": "",
    "text": "Show/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggplate)",
    "crumbs": [
      "2. Community growth - experiment design",
      "i) Species pairs - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/01_pairs.html#global-variables",
    "href": "R/communities/experiment_design/01_pairs.html#global-variables",
    "title": "Designing two-species subcommunities",
    "section": "",
    "text": "Show/hide code\ndata &lt;- here::here(\"data\", \"communities\", \"experiment_design\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "2. Community growth - experiment design",
      "i) Species pairs - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/01_pairs.html#functions-and-vars",
    "href": "R/communities/experiment_design/01_pairs.html#functions-and-vars",
    "title": "Designing two-species subcommunities",
    "section": "",
    "text": "Species color vector\n\n\nShow/hide code\nmy_colors &lt;- c(\n  \"ANC_0403_10\" = \"#ffaaaa\", \"ANC_0403_70\" = \"#aa0000\", \"ANC_0403_80\" = \"#aa0000\", \"ANC_0403_90\" = \"#aa0000\", \n  \"ANC_1287_10\" = \"#ffeeaa\", \"ANC_1287_70\" = \"#d4aa00\", \"ANC_1287_80\" = \"#d4aa00\", \"ANC_1287_90\" = \"#d4aa00\", \n  \"ANC_1896_10\" = \"#ccffaa\", \"ANC_1896_70\" = \"#44aa00\", \"ANC_1896_80\" = \"#44aa00\", \"ANC_1896_90\" = \"#44aa00\", \n  \"ANC_1977_10\" = \"#aaccff\", \"ANC_1977_70\" = \"#0055d4\", \"ANC_1977_80\" = \"#0055d4\", \"ANC_1977_90\" = \"#0055d4\",\n  \"EVO_0403_10\" = \"#ffaaee\", \"EVO_0403_70\" = \"#ff00cc\", \"EVO_0403_80\" = \"#ff00cc\", \"EVO_0403_90\" = \"#ff00cc\", \n  \"EVO_1287_10\" = \"#ffccaa\", \"EVO_1287_70\" = \"#ff6600\", \"EVO_1287_80\" = \"#ff6600\", \"EVO_1287_90\" = \"#ff6600\", \n  \"EVO_1896_10\" = \"#aaffee\", \"EVO_1896_70\" = \"#00ffcc\", \"EVO_1896_80\" = \"#00ffcc\", \"EVO_1896_90\" = \"#00ffcc\", \n  \"EVO_1977_10\" = \"#ccaaff\", \"EVO_1977_70\" = \"#7f2aff\", \"EVO_1977_80\" = \"#7f2aff\", \"EVO_1977_90\" = \"#7f2aff\"\n  )\n\n\nFor plotting plates\n\n\nShow/hide code\nplate_plot_steps &lt;- function(df, well_colmun, val_column, step, colr_vec){\n  ggplate::plate_plot(df,\n  position = {{ well_colmun }},\n  value = {{ val_column }},\n  colour = colr_vec,\n  plate_size = 96,\n  plate_type = \"round\"\n) + ggtitle(step)\n}",
    "crumbs": [
      "2. Community growth - experiment design",
      "i) Species pairs - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/01_pairs.html#format-and-save",
    "href": "R/communities/experiment_design/01_pairs.html#format-and-save",
    "title": "Designing two-species subcommunities",
    "section": "2.1 Format and save",
    "text": "2.1 Format and save\n\n\nShow/hide code\ncombos02_filt_well %&gt;%\n  group_by(a, b) %&gt;% \n  mutate(microcosm_id = cur_group_id()) %&gt;% \n  ungroup() %&gt;% \n  mutate(a_sp = paste0(str_split_i(a, \"_\", 2), stringr::str_extract(str_split_i(a, \"_\", 1), \"^.{1}\")),\n         b_sp = paste0(str_split_i(b, \"_\", 2), stringr::str_extract(str_split_i(b, \"_\", 1), \"^.{1}\")),\n         a_f = str_split_i(a, \"_\", 3),\n         b_f = str_split_i(b, \"_\", 3)) %&gt;% \n  arrange(well) %&gt;% \n  dplyr::select(microcosm_id, well, a, a_sp, a_f, b, b_sp, b_f) %&gt;% \n  readr::write_tsv(here::here(data, \"pairs_sample_composition_wide.tsv\"))\n\n\n\n\nShow/hide code\ncombos02_filt_well %&gt;% \n  group_by(a, b) %&gt;% \n  mutate(microcosm_id = cur_group_id()) %&gt;% \n  ungroup() %&gt;% \n  dplyr::select(a:b, well, microcosm_id) %&gt;% \n  tidyr::pivot_longer(c(-well, -microcosm_id)) %&gt;% \n  tidyr::separate(value, c(\"evo_hist\", \"strainID\", \"target_f\")) %&gt;% \n  dplyr::mutate(evo_hist = stringr::str_to_lower(evo_hist),\n                strainID = paste0(\"HAMBI_\", strainID),\n                target_f = as.numeric(target_f)/100,\n                n_species = 2) %&gt;% \n  dplyr::select(-name) %&gt;% \n  dplyr::relocate(microcosm_id, n_species) %&gt;% \n  readr::write_tsv(here::here(data, \"pairs_sample_composition_long.tsv\"))",
    "crumbs": [
      "2. Community growth - experiment design",
      "i) Species pairs - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/01_pairs.html#first-pipetting-step",
    "href": "R/communities/experiment_design/01_pairs.html#first-pipetting-step",
    "title": "Designing two-species subcommunities",
    "section": "3.1 First pipetting step",
    "text": "3.1 First pipetting step\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Layout for the first pipetting step for constructing pairs. Different colors show different species/evolution combinations. The darkness of the color indicates whether a species/evolution combo is added at 90% (e.g., _90) or 10% (e.g., _10).",
    "crumbs": [
      "2. Community growth - experiment design",
      "i) Species pairs - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/01_pairs.html#second-pipetting-step",
    "href": "R/communities/experiment_design/01_pairs.html#second-pipetting-step",
    "title": "Designing two-species subcommunities",
    "section": "3.2 Second pipetting step",
    "text": "3.2 Second pipetting step\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Layout for the second pipetting step for constructing pairs. Different colors show different species/evolution combinations. The darkness of the color indicates whether a species/evolution combo is added at 90% (e.g., _90) or 10% (e.g., _10).",
    "crumbs": [
      "2. Community growth - experiment design",
      "i) Species pairs - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/03_quartets.html",
    "href": "R/communities/experiment_design/03_quartets.html",
    "title": "Designing four-species subcommunities",
    "section": "",
    "text": "Show/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggplate)\n\n\n\n\n\n\n\nShow/hide code\ndata &lt;- here::here(\"data\", \"communities\", \"experiment_design\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)\n\n\n\n\n\nSpecies color vector\n\n\nShow/hide code\nmy_colors &lt;- c(\n  \"ANC_0403_10\" = \"#ffaaaa\", \"ANC_0403_70\" = \"#aa0000\", \"ANC_0403_80\" = \"#aa0000\", \"ANC_0403_90\" = \"#aa0000\", \n  \"ANC_1287_10\" = \"#ffeeaa\", \"ANC_1287_70\" = \"#d4aa00\", \"ANC_1287_80\" = \"#d4aa00\", \"ANC_1287_90\" = \"#d4aa00\", \n  \"ANC_1896_10\" = \"#ccffaa\", \"ANC_1896_70\" = \"#44aa00\", \"ANC_1896_80\" = \"#44aa00\", \"ANC_1896_90\" = \"#44aa00\", \n  \"ANC_1977_10\" = \"#aaccff\", \"ANC_1977_70\" = \"#0055d4\", \"ANC_1977_80\" = \"#0055d4\", \"ANC_1977_90\" = \"#0055d4\",\n  \"EVO_0403_10\" = \"#ffaaee\", \"EVO_0403_70\" = \"#ff00cc\", \"EVO_0403_80\" = \"#ff00cc\", \"EVO_0403_90\" = \"#ff00cc\", \n  \"EVO_1287_10\" = \"#ffccaa\", \"EVO_1287_70\" = \"#ff6600\", \"EVO_1287_80\" = \"#ff6600\", \"EVO_1287_90\" = \"#ff6600\", \n  \"EVO_1896_10\" = \"#aaffee\", \"EVO_1896_70\" = \"#00ffcc\", \"EVO_1896_80\" = \"#00ffcc\", \"EVO_1896_90\" = \"#00ffcc\", \n  \"EVO_1977_10\" = \"#ccaaff\", \"EVO_1977_70\" = \"#7f2aff\", \"EVO_1977_80\" = \"#7f2aff\", \"EVO_1977_90\" = \"#7f2aff\"\n  )\n\n\nFor plotting plates\n\n\nShow/hide code\nplate_plot_steps &lt;- function(df, well_colmun, val_column, step, colr_vec){\n  ggplate::plate_plot(df,\n  position = {{ well_colmun }},\n  value = {{ val_column }},\n  colour = colr_vec,\n  plate_size = 96,\n  plate_type = \"round\"\n) + ggtitle(step)\n}",
    "crumbs": [
      "2. Community growth - experiment design",
      "iii) Species quartets - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/03_quartets.html#libraries",
    "href": "R/communities/experiment_design/03_quartets.html#libraries",
    "title": "Designing four-species subcommunities",
    "section": "",
    "text": "Show/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggplate)",
    "crumbs": [
      "2. Community growth - experiment design",
      "iii) Species quartets - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/03_quartets.html#global-variables",
    "href": "R/communities/experiment_design/03_quartets.html#global-variables",
    "title": "Designing four-species subcommunities",
    "section": "",
    "text": "Show/hide code\ndata &lt;- here::here(\"data\", \"communities\", \"experiment_design\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "2. Community growth - experiment design",
      "iii) Species quartets - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/03_quartets.html#functions-and-vars",
    "href": "R/communities/experiment_design/03_quartets.html#functions-and-vars",
    "title": "Designing four-species subcommunities",
    "section": "",
    "text": "Species color vector\n\n\nShow/hide code\nmy_colors &lt;- c(\n  \"ANC_0403_10\" = \"#ffaaaa\", \"ANC_0403_70\" = \"#aa0000\", \"ANC_0403_80\" = \"#aa0000\", \"ANC_0403_90\" = \"#aa0000\", \n  \"ANC_1287_10\" = \"#ffeeaa\", \"ANC_1287_70\" = \"#d4aa00\", \"ANC_1287_80\" = \"#d4aa00\", \"ANC_1287_90\" = \"#d4aa00\", \n  \"ANC_1896_10\" = \"#ccffaa\", \"ANC_1896_70\" = \"#44aa00\", \"ANC_1896_80\" = \"#44aa00\", \"ANC_1896_90\" = \"#44aa00\", \n  \"ANC_1977_10\" = \"#aaccff\", \"ANC_1977_70\" = \"#0055d4\", \"ANC_1977_80\" = \"#0055d4\", \"ANC_1977_90\" = \"#0055d4\",\n  \"EVO_0403_10\" = \"#ffaaee\", \"EVO_0403_70\" = \"#ff00cc\", \"EVO_0403_80\" = \"#ff00cc\", \"EVO_0403_90\" = \"#ff00cc\", \n  \"EVO_1287_10\" = \"#ffccaa\", \"EVO_1287_70\" = \"#ff6600\", \"EVO_1287_80\" = \"#ff6600\", \"EVO_1287_90\" = \"#ff6600\", \n  \"EVO_1896_10\" = \"#aaffee\", \"EVO_1896_70\" = \"#00ffcc\", \"EVO_1896_80\" = \"#00ffcc\", \"EVO_1896_90\" = \"#00ffcc\", \n  \"EVO_1977_10\" = \"#ccaaff\", \"EVO_1977_70\" = \"#7f2aff\", \"EVO_1977_80\" = \"#7f2aff\", \"EVO_1977_90\" = \"#7f2aff\"\n  )\n\n\nFor plotting plates\n\n\nShow/hide code\nplate_plot_steps &lt;- function(df, well_colmun, val_column, step, colr_vec){\n  ggplate::plate_plot(df,\n  position = {{ well_colmun }},\n  value = {{ val_column }},\n  colour = colr_vec,\n  plate_size = 96,\n  plate_type = \"round\"\n) + ggtitle(step)\n}",
    "crumbs": [
      "2. Community growth - experiment design",
      "iii) Species quartets - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/03_quartets.html#format-and-save",
    "href": "R/communities/experiment_design/03_quartets.html#format-and-save",
    "title": "Designing four-species subcommunities",
    "section": "2.1 Format and save",
    "text": "2.1 Format and save\n\n\nShow/hide code\ncombos04_filt_wells %&gt;%\n  group_by(a, b, c, d) %&gt;% \n  mutate(microcosm_id = cur_group_id()) %&gt;% \n  ungroup() %&gt;% \n  mutate(a_sp = paste0(str_split_i(a, \"_\", 2), stringr::str_extract(str_split_i(a, \"_\", 1), \"^.{1}\")),\n         b_sp = paste0(str_split_i(b, \"_\", 2), stringr::str_extract(str_split_i(b, \"_\", 1), \"^.{1}\")),\n         c_sp = paste0(str_split_i(c, \"_\", 2), stringr::str_extract(str_split_i(c, \"_\", 1), \"^.{1}\")),\n         d_sp = paste0(str_split_i(d, \"_\", 2), stringr::str_extract(str_split_i(d, \"_\", 1), \"^.{1}\")),\n         a_f = str_split_i(a, \"_\", 3),\n         b_f = str_split_i(b, \"_\", 3),\n         c_f = str_split_i(c, \"_\", 3),\n         d_f = str_split_i(d, \"_\", 3)) %&gt;% \n  arrange(well) %&gt;% \n  dplyr::select(microcosm_id, well, a, a_sp, a_f, b, b_sp, b_f, c, c_sp, c_f, d, d_sp, d_f) %&gt;% \n  readr::write_tsv(here::here(data, \"quartets_sample_composition_wide.tsv\"))\n\n\n\n\nShow/hide code\ncombos04_filt_wells %&gt;%\n  group_by(a, b, c, d) %&gt;% \n  mutate(microcosm_id = cur_group_id()) %&gt;% \n  ungroup() %&gt;% \n  dplyr::select(a:d, well, microcosm_id) %&gt;% \n  tidyr::pivot_longer(c(-well, -microcosm_id)) %&gt;% \n  tidyr::separate(value, c(\"evo_hist\", \"strainID\", \"target_f\")) %&gt;% \n  dplyr::mutate(evo_hist = stringr::str_to_lower(evo_hist),\n                strainID = paste0(\"HAMBI_\", strainID),\n                target_f = as.numeric(target_f)/100,\n                n_species = 4) %&gt;% \n  dplyr::select(-name) %&gt;% \n  dplyr::relocate(microcosm_id, n_species) %&gt;% \n  readr::write_tsv(here::here(data, \"quartets_sample_composition_long.tsv\"))",
    "crumbs": [
      "2. Community growth - experiment design",
      "iii) Species quartets - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/03_quartets.html#first-pipetting-step",
    "href": "R/communities/experiment_design/03_quartets.html#first-pipetting-step",
    "title": "Designing four-species subcommunities",
    "section": "3.1 First pipetting step",
    "text": "3.1 First pipetting step\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Layout for the first pipetting step for constructing quartets Different colors show different species/evolution combinations. The darkness of the color indicates whether a species/evolution combo is added at 70% (e.g., _70) or 10% (e.g., _10).",
    "crumbs": [
      "2. Community growth - experiment design",
      "iii) Species quartets - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/03_quartets.html#second-pipetting-step",
    "href": "R/communities/experiment_design/03_quartets.html#second-pipetting-step",
    "title": "Designing four-species subcommunities",
    "section": "3.2 Second pipetting step",
    "text": "3.2 Second pipetting step\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Layout for the second pipetting step for constructing quartets Different colors show different species/evolution combinations. The darkness of the color indicates whether a species/evolution combo is added at 70% (e.g., _70) or 10% (e.g., _10).",
    "crumbs": [
      "2. Community growth - experiment design",
      "iii) Species quartets - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/03_quartets.html#third-pipetting-step",
    "href": "R/communities/experiment_design/03_quartets.html#third-pipetting-step",
    "title": "Designing four-species subcommunities",
    "section": "3.3 Third pipetting step",
    "text": "3.3 Third pipetting step\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Layout for the third pipetting step for constructing quartets Different colors show different species/evolution combinations. The darkness of the color indicates whether a species/evolution combo is added at 70% (e.g., _70) or 10% (e.g., _10).",
    "crumbs": [
      "2. Community growth - experiment design",
      "iii) Species quartets - 96 Well plate layout"
    ]
  },
  {
    "objectID": "R/communities/experiment_design/03_quartets.html#fourth-pipetting-step",
    "href": "R/communities/experiment_design/03_quartets.html#fourth-pipetting-step",
    "title": "Designing four-species subcommunities",
    "section": "3.4 Fourth pipetting step",
    "text": "3.4 Fourth pipetting step\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: Layout for the fourth pipetting step for constructing quartets Different colors show different species/evolution combinations. The darkness of the color indicates whether a species/evolution combo is added at 70% (e.g., _70) or 10% (e.g., _10).",
    "crumbs": [
      "2. Community growth - experiment design",
      "iii) Species quartets - 96 Well plate layout"
    ]
  }
]