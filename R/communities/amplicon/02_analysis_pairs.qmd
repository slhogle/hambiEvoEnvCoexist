---
title: "Analysis of pairwise competition"
author: "Shane Hogle"
date: today
link-citations: true
abstract: "Here we analyze the community outpcomes from all competing species pairs."
---

# Introduction

Contains results from pairs of all streptomycin concentrations and trios for 0 streptomycin

# Setup

## Libraries

```{r}
#| output: false
library(tidyverse)
library(here)
library(fs)
library(scales)
library(patchwork)
library(broom)
library(ggraph)
library(tidygraph)
source(here::here("R", "utils_generic.R"))
source(here::here("R", "communities", "amplicon", "utils_amplicon.R"))
```

## Global variables

```{r}
data <- here::here("data", "communities")
# make processed data directory if it doesn't exist
fs::dir_create(data)
```

# Read data

## Species abundances

```{r}
#| output: false
samp_pairs <- readr::read_tsv(here::here(data, "2sps_compiled.tsv")) %>% 
  dplyr::rename(f = f_thresh)
```

# Formatting

## Transfer 0 (starting proportions)

First get abundances from transfer 0 (masterplate)

```{r}
samp_pairs_fmt_mp <- samp_pairs %>% 
  dplyr::filter(community_type == "masterplate") %>% 
  # make a combined evolution and species identifier and extract the community ID
  dplyr::mutate(sp = paste(str_to_upper(evo_hist), str_extract(strainID, "\\d+"), sep = "_"),
         community_id = str_extract(sample, "P\\d\\d")) %>%
  # this step is important to ensure that when dfs are pivoted wider the 
  # sp_1 and sp_2 stay consistent 
  dplyr::arrange(community_id, sp) %>%
  # this creates an index for each species present in each community, it is needed
  # for the pivot to be consistent between the master plate and the samples
  dplyr::group_by(community_id) %>% 
  dplyr::mutate(n = 1:n()) %>% 
  dplyr::ungroup() %>% 
  tidyr::pivot_wider(id_cols = community_id, values_from = c(sp, f), names_from = n) %>% 
  dplyr::mutate(transfer = 0) %>% 
  tidyr::expand_grid(strep_conc = c(0, 16, 64, 256)) %>% 
  arrange(sp_1, sp_2, strep_conc)
```

## Transfer 8 (ending proportions)

Format abundances from the experiment, summarizing over replicates. Here we calculate the median frequency across biological replicates using `Hmisc::smedian.hilow` which computes the sample median and the outer quantiles (0.025 and 0.975).

```{r}
samp_pairs_fmt_exp <- samp_pairs %>% 
  dplyr::filter(community_type == "experiment") %>% 
  # make a combined evolution and species identifier and extract the community ID
  dplyr::mutate(sp = paste(str_to_upper(evo_hist), str_extract(strainID, "\\d+"), sep = "_"),
         community_id = str_extract(sample, "P\\d\\d")) %>%
  # calculate median and 95% CI across replicates
  dplyr::summarize(ggplot2::median_hilow(f), .by = c("community_id", "sp", "strep_conc")) %>% 
  # rename the y columns as f for compatibility
  dplyr::rename_with(.cols = starts_with("y"), \(x) str_replace(x, "y", "f")) %>% 
  # this step is important to ensure that when dfs are pivoted wider the 
  # sp_1 and sp_2 stay consistent 
  dplyr::arrange(community_id, sp, strep_conc) %>%
  # this creates an index for each species present in each community, it is needed
  # for the pivot to be consistent between the master plate and the samples
  dplyr::group_by(community_id, strep_conc) %>% 
  dplyr::mutate(n = 1:n()) %>% 
  dplyr::ungroup() %>% 
  tidyr::pivot_wider(id_cols = c(community_id, strep_conc), values_from = c(sp, f, fmin, fmax), names_from = n) %>% 
  dplyr::mutate(transfer = 8) %>% 
  arrange(sp_1, sp_2, strep_conc)
```

# Define competition outcomes

## Binomial sampling and Wilcox test

First need to determine which samples significantly decreased/increased from T0 to T8. We don't have enough biological replicates for to compute a statistic across replicates for [outcome variability](https://www.pnas.org/doi/10.1073/pnas.2302491120). However, we can estimate the mean fraction of A and quantify the inferential uncertainty of the mean by bootstrap resampling. We the used median proportion of species A from two biological replicates of each T8 pair as the probability of success (i.e., drawing species A) from 1000 draws (i.e., sequencing reads) from the binomial distribution. To determine whether the frequency of Species A significantly changed from T0 to T8, the means of the 1000 binomial draws for T0 and T8 were compared using a Wilcoxon rank sum test (N = 2000). Tests with Bonferroni multiple test corrected p values < 1e-5 were considered to represent significantly different T0 and T8 samples.  

```{r}
set.seed(124341)

# first join the T0 and T8 abundances
wc_test <- left_join(samp_pairs_fmt_exp, samp_pairs_fmt_mp, by = join_by(community_id, strep_conc, sp_1, sp_2)) %>% 
  dplyr::mutate(delta_f_1 = f_1.x - f_1.y) %>% 
  dplyr::select(community_id, strep_conc, sp_1, sp_2, delta_f_1, f_1_8 = f_1.x, f_1_0 = f_1.y, 
                f_2_8 = f_2.x, f_2_0 = f_2.y) %>% 
  tidyr::nest(data = c(-community_id, -strep_conc)) %>%
  # samples 1000 draws from binomial distribution using f_a median as the probability of success
  dplyr::mutate(f_1_0_rs = purrr::map(data, \(x) map(1:100, \(i) sum(rbinom(1000, 1, x$f_1_0))/1000)),
         f_1_8_rs = purrr::map(data, \(x) map(1:100, \(i) sum(rbinom(1000, 1, x$f_1_8))/1000))) %>% 
  tidyr::unnest(cols = c(data, f_1_0_rs, f_1_8_rs)) %>% 
  # nest the samples
  tidyr::nest(bs = c(f_1_0_rs, f_1_8_rs)) %>%
  # perform the wilcox test
  dplyr::mutate(wc = purrr::map(bs, \(i) wilcox.test(x = as.numeric(i$f_1_0_rs), y = as.numeric(i$f_1_8_rs)))) %>% 
  # tidy-ify the test output
  dplyr::mutate(tidy_wc = purrr::map(wc, \(x) broom::tidy(x))) %>% 
  tidyr::unnest(cols = c(tidy_wc)) %>% 
  # p-value adjust using bonferroni correction
  dplyr::mutate(p_adjusted = p.adjust(p.value, method = "bonferroni", n = n())) %>% 
  dplyr::arrange(strep_conc, sp_1, sp_2) %>% 
  # define whether change is significantly positive or negative
  dplyr::mutate(change = dplyr::case_when(p.value > 1e-5 ~ 0,
                             sign(delta_f_1) == -1 & p.value <= 1e-5 ~ -1, 
                             sign(delta_f_1) == 1 & p.value <= 1e-5 ~ 1)) 
```

## Competition outcome rules

Here we set up the rules for defining the competition outcomes. In the pairwise competition experiments each species and evolutionary form was competed against all other species and evolutionary forms (excluding evolutionary forms of the same species because these cannot be resolved using amplicon data). Each competitor in a pair $\{A, B\}$ was allowed to invade from rare ($f^{R} = 0.1$) while the other competitor was common ($f^{C} = 0.9$) in duplicate for 8 growth cycles resulting in 4 experiments for each competing pair. We used a $f_{extinct} = 0.01$ frequency threshold for deciding whether a species was operationally extinct and a $| \Delta_{(t8-t0)} f | \geq 0.05 $ change over 8 growth cycles to decide whether the magnitude of change over the 8 growth cycles was appreciable. Using the abundance outcomes from both replicates of each the pairwise competition experiments for each pair we classified outcomes as "competitive exclusion", "coexistence", "bistability", or "inconclusive" according to the following criteria:

### Bistability

Requires each species in a pair to significantly increase ($\Delta f_{\{A, B\}} \geq 0.05$) when starting from common *and* significantly decrease ($\Delta f_{\{A, B\}} \leq -0.05$) in abundance when invading from rare over the 8 growth cycles.

### Competitive exclusion

Competitive exclusion means one species of a pair excludes the other to it's (eventual) extinction. We classified competitive exclusion as "Stable" or "Incomplete" based on the following features:

#### Stable

Stable exclusion requires one species in a pair to go extinct (below 1% abundance detection limit threshold) in all 4 experiments performed for the two species. It also requires that the species undergoing extinction should always decrease over the 8 growth cycles by at least 5%. In practice this excludes samples where the extinct species started so rare that it was already effectively extinct.

$$
\begin{align*} 
& {f_{\{A, B\}}}_{t8} \leq f_{extinct} \\ 
& \Delta f_{\{A, B\}} \leq -0.05 \\
\end{align*}
$$

#### Incomplete

Incomplete exclusion results if one of the species at cycle 8 is not extinct but its frequency significantly decreased over 8 growth cycles in all four experiments (Wilcoxon test, P<0.05, N=2000 in each experiment).

$$
\begin{align*}
& {f_{\{A, B\}}}_{t8} > f_{extinct} \\ 
& \Delta f_{\{A, B\}} \leq -0.05, \space p < 0.05 \\
\end{align*}
$$
                             
### Coexistence

We classified a pair as coexisting if both species are able to invade each other from low frequency. We classified competitive exclusion as "Stable" or "Incomplete" based on differing levels of supporting evidence.

#### Stable

We defined "Stable Coexistence" as those species pairs where each species could invade the other from rare (fulfillment of the mutual invasibility criterion). table coexistence results if each species exists outside the extinction threshold and over 8 growth cycles and could significantly increase (Wilcoxon test, P<0.05, N=2000 in each experiment)by at least 5% from rare in both replicates. 

$$
\begin{align*}
& {f_{\{A, B\}}^{Rare}}_{t8} > f_{extinct} \\ 
& \Delta f_{\{A, B\}}^{Rare} \geq 0.05, \space p < 0.05 \\
\end{align*}
$$

#### Incomplete

We defined "Incomplete coexistence" as those species pairs that were found together after 8 growth cycles but no condition was placed on the significance of the change of each species from T0 to T8. For example, if a species started from low abundance and after 8 growth cycles also ended at low abundance that was not significantly different from the starting abundance.

$$
\begin{align*}
& {f_{\{A, B\}}}_{t8} > f_{extinct} \\ 
\end{align*}
$$

#### Inconclusive outcomes

This category included pairs that did not meet the requirements to be classified in any of the above described categories. 

```{r}
# upper threshold for deciding whether a species goes extinct
upper <- 0.99
# lower threshold for deciding whether a species goes extinct
lower <- 0.01
# slope change threshold for deciding whether change from T0 to T8 is important (e.g. requires at least a 5% change of the focal species) 
slope_thresh <- 0.05

outcomes_classified <- wc_test %>% 
  dplyr::group_by(strep_conc, sp_1, sp_2) %>% 
  dplyr::mutate(outcome = dplyr::case_when(# Bistability: Requires sp_1 to both increase from T0 high freq and decrease from T0 low freq
                             sum(change < 0 & f_1_0 == min(f_1_0), change > 0 & f_1_0 == max(f_1_0)) == 2 ~ "bistable_stable",
                             # Exclusion: sp_1 increases from both low and high T0 freqs and T8 freq is > than the T0 high freq
                             sum(change) == 2 & f_1_8 >= upper & abs(delta_f_1) > slope_thresh ~ "exclusion_stable", 
                             # Exclusion: sp_1 decreases from both low and high T0 freqs and T8 freq is < than the T0 low freq
                             sum(change) == -2 & f_1_8 <= lower & abs(delta_f_1) > slope_thresh ~ "exclusion_stable",
                             # Coexistence: sp_1 significantly increases from rare and significantly decreases from abundant
                             sum(change) == 0 & dplyr::if_else(f_1_0 == pmin(f_1_0, f_2_0), f_1_8 > f_1_0, f_1_8 < f_1_0) ~ "coexistence_stable",
                             # Incomplete coexistence: sp_1 is found within extinction thresholds in both experiments, but no condition is
                             # placed on the significance of the change from T0 to T8
                             sum(dplyr::between(f_1_8, lower, upper)) == 2 ~ "coexistence_incomplete",
                             # Incomplete exclusion: sp_1 is outside of the extinction threshold (extinct) for at least one sample and within the the 
                             # threshold for the other sample.
                             sum(!dplyr::between(f_1_8, lower, upper)) == 1 & sum(dplyr::between(f_1_8, lower, upper)) == 1 ~ "exclusion_incomplete",
                             # Inconclusive: samples failing to meet any of the above rules
                             TRUE ~ "inconclusive_")) %>% 
  dplyr::ungroup() %>% 
  dplyr::mutate(type = dplyr::if_else(stringr::str_detect(outcome, "incomplete"), "incomplete", "stable"),
         outcome = stringr::str_extract(outcome, "(^.+)_.*", group = 1)) %>% 
  dplyr::relocate(outcome, type, change)
```

## Plotting pairwise outpcomes

Construct final dataframe to be used for plotting

```{r}
samp_pairs_fmt <- dplyr::bind_rows(samp_pairs_fmt_mp, samp_pairs_fmt_exp) %>%
  dplyr::mutate(
    group = interaction(community_id, strep_conc),
    evo_group = dplyr::case_when(
      dplyr::if_all(c(sp_1, sp_2), \(x) stringr::str_detect(x, "ANC")) ~ "both_anc",
      dplyr::if_all(c(sp_1, sp_2), \(x) stringr::str_detect(x, "EVO")) ~ "both_evo",
      TRUE ~ "mix"
    )
  ) %>%
  dplyr::left_join(outcomes_classified,
                   by = dplyr::join_by(community_id, sp_1, sp_2, strep_conc)) %>%
  dplyr::mutate(
    outcome = factor(outcome, levels = c("exclusion", "coexistence", 
                                         "bistable", "inconclusive")),
    type = factor(type, levels = c("stable", "incomplete"))
  )
```

Create different lists of plots for the mixed (i.e. evo competed against anc) conditions
```{r}
samp_pairs_fmt_plots_split_a <- samp_pairs_fmt %>% 
  dplyr::filter(evo_group != "mix") %>% 
  dplyr::group_by(strep_conc, evo_group) %>% 
  dplyr::group_split() %>% 
  purrr::map(pair_plot)

samp_pairs_fmt_plots_split_b <- samp_pairs_fmt %>% 
  dplyr::filter(evo_group == "mix") %>% 
  dplyr::group_by(strep_conc) %>% 
  dplyr::group_split() %>% 
  purrr::map(pair_plot)
```

```{r}
#| warning: false
fig01 <- patchwork::wrap_plots(samp_pairs_fmt_plots_split_a, ncol = 2) +
  patchwork::plot_annotation(tag_levels = "A")
```

```{r}
#| eval: false
#| include: true
ggsave(
  here::here("figs", "coexistence_pairs.svg"),
  fig01,
  width = 7,
  height = 12,
  units = "in",
  device = "svg"
)
```

::: {#fig-01}
```{r}
#| fig-width: 7
#| fig-height: 12
#| warning: false
#| echo: false
fig01
```
Outcomes from pairwise cocultures of ancestral (left, A:G) and streptomycin adapted (right, B:H) 0403, 1287, 1896 and 1977 species. Rows in the grid represent differen streptomycin concentrations applied (A:B = 0 µg/ml, C:D = 16 µg/ml, E:F = 64 µg/ml, G:H = 256 µg/ml). Using the rules defined above, red lines show cocultures resulting in exclusion of one of the species, blue lines show cocultures that resulted in coexistence, and purple lines represent inconclusive outcomes due to lack of data or exception to therules. Solid lines show a "definite" outcome and dashed lines show a potentially "incomplete" outcome. Two solid lines of the same color indicate stable coexistence or stable exclusion, a solid and dashed line indicate incomplete coexistence/exclusion, while two dashed lines indicates coexistence without evidence of mutual invasibility. Note some statistical noise has been applied to point positions to prevent overlaps in the plot and aid in visualization. **NOTE:** that in panel E (64 µg/ml streptomycin) both replicates survived with OD ~ 0.15 when ANC_0403 was started from 90% abundance but not when it was started at 10% abundance (OD ~ 0.04). In all replicates of 90%/10% starting abundance ANC_1977 was driven extinct.
:::

```{r}
#| warning: false
fig02 <- patchwork::wrap_plots(samp_pairs_fmt_plots_split_b, ncol = 2) +
  patchwork::plot_annotation(tag_levels = "A")
```

```{r}
#| eval: false
#| include: true
ggsave(
  here::here("figs", "coexistence_pairs_mixed_hist.svg"),
  fig02,
  width = 7,
  height = 7,
  units = "in",
  device = "svg"
)
```

::: {#fig-02}
```{r}
#| fig-width: 7
#| fig-height: 7
#| warning: false
#| echo: false
fig02
```
Results from co-cultures of mixed ancestal and evolved combinations. Line colors and types are as in @fig-01, with the addition of green showing bistability (i.e., Species A and Species B exclude each other when invading from high abundance, and each are excluded by the other when invading from low abundance).
:::

# Network

Here we will plot the pairwise competition outcomes as a network. **NOTE:** I don't have time/energy to figure out how to manage all the links in the networks so that they line up properly and don't overlap so there will need to be some postprocessing in inkscape to move some of the links so they don't overlap.

```{r}
#| output: false
library(ggraph)
library(tidygraph)
```

## Evolution and Streptomycin categories separate

Here we plot a separate graph for each streptomycin concentrations and also by different evolutionary groupings. For example, there is one graph for the competition outcomes of only ancestral species, there is one graph of the outcomes of only evolved species, and there is one graph for the outcomes of mixed competitions where an ancestral species competes against an evolved species.

```{r}
#| warning: false
nodes1 <- make_nodes(samp_pairs_fmt, evo_group, strep_conc)
edges1 <- make_edges(samp_pairs_fmt, evo_group, strep_conc)

graphs1 <- nest(nodes1, sps = -c(evo_group, strep_conc)) %>% 
  left_join(nest(edges1, pairs = -c(evo_group, strep_conc)),
            by = join_by(evo_group, strep_conc)) %>% 
  mutate(network = map2(sps, pairs, function(sps, pairs) tbl_graph(nodes = sps, edges = pairs, directed = T))) %>% 
  mutate(plot = map(network, function(network) plot_network_hierarchy(network, tune_angle = 1.5, n_rank = 7, n_break = 7)))
```


```{r}
#| warning: false
fig03 <- patchwork::wrap_plots(graphs1[[6]], nrow = 3, guides= "collect") +
  patchwork::plot_annotation(tag_levels = "A")
```

```{r}
#| eval: false
#| include: true
ggsave(
  here::here("figs", "coexistence_networks_nested_evo_strep.svg"),
  fig03,
  width = 8,
  height = 10,
  units = "in",
  device = "svg"
)
```

::: {#fig-03}
```{r}
#| fig-width: 8
#| fig-height: 10
#| warning: false
#| echo: false
fig03
```
Competitive hierarchy of species pairs separated by evolution grouping (only ancestral pairs, only evolved pairs, and mixed ancestral and evolved pairs) and streptomycin concentration. Subplots A-D are for only ancestral pairs, E-H for only evolved pairs, and I-L for mixed ancestral and evolved pairs. Subplots A, E, I show experiments under no streptomycin, B, F, J 16 µg/ml streptomycin, C, G, K for 64 µg/ml streptomycin, and D, H, L for 256 µg/ml streptomycin. For each evolution/streptomycin grouping, strains are rank ordered on the basis of the number of other strains they exclude, based on data shown in @fig-01 and @fig-02. Grey nodes represent strains (denoted by text), red arrows point from winning strain to losing strain, blue arrows indicate coexistence (ignore the arrow heads for blue, coulnd't figure out how to remove them for only a subset of the edges), and green arrows indicate the presence of bistability (i.e., Species A and Species B exclude each other when invading from high abundance, and each are excluded by the other when invading from low abundance). Line type indicates the degree of certainty of the outcome in each pair: dashed lines represent incomplete exclusion or coexistence without evidence of mutual invasibility, while solid lines indicate complete exclusion or stable coexistence (mutual invasibility). 
:::

## Only Streptomycin category separate

```{r}
#| warning: false
nodes2 <- make_nodes(samp_pairs_fmt, strep_conc)
edges2 <- make_edges(samp_pairs_fmt, strep_conc)

graphs2 <- nest(nodes2, sps = -c(strep_conc)) %>% 
  left_join(nest(edges2, pairs = -c(strep_conc)),
            by = join_by(strep_conc)) %>% 
  mutate(network = map2(sps, pairs, function(sps, pairs) tbl_graph(nodes = sps, edges = pairs, directed = T))) %>% 
  mutate(plot = map(network, function(network) plot_network_hierarchy(network, tune_angle = 1.5, n_rank = 7, n_break = 7)))
```

```{r}
#| warning: false
fig04 <- patchwork::wrap_plots(graphs2[[5]], nrow = 1, guides= "collect") +
  patchwork::plot_annotation(tag_levels = "A")
```

```{r}
#| eval: false
#| include: true
ggsave(
  here::here("figs", "coexistence_networks_nested_strep.svg"),
  fig04,
  width = 9,
  height = 4,
  units = "in",
  device = "svg"
)
```

::: {#fig-04}
```{r}
#| fig-width: 9
#| fig-height: 4
#| warning: false
#| echo: false
fig04
```
Competitive hierarchy of species pairs separated by streptomycin concentration. Subplot A shows experiments under no streptomycin, B with 16 µg/ml streptomycin, C with 64 µg/ml streptomycin, and D with 256 µg/ml streptomycin. For each evolution/streptomycin grouping, strains are rank ordered on the basis of the number of other strains they exclude, based on data shown in @fig-01 and @fig-02. Grey nodes represent strains (denoted by text), red arrows point from winning strain to losing strain, blue arrows indicate coexistence (ignore the arrow heads for blue, coulnd't figure out how to remove them for only a subset of the edges), and green arrows indicate the presence of bistability (i.e., Species A and Species B exclude each other when invading from high abundance, and each are excluded by the other when invading from low abundance). Line type indicates the degree of certainty of the outcome in each pair: dashed lines represent incomplete exclusion or coexistence without evidence of mutual invasibility, while solid lines indicate complete exclusion or stable coexistence (mutual invasibility). 
:::
